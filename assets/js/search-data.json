{"0": {
    "doc": "Licenses",
    "title": "Licenses",
    "content": " ",
    "url": "/f3d/_licenses.html",
    
    "relUrl": "/_licenses.html"
  },"1": {
    "doc": "Code of conduct",
    "title": "Code of conduct",
    "content": "# F3D Code of Conduct ## Our Pledge We as members, contributors, moderators and maintainers pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socioeconomic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. ## Our Standards Examples of behavior that contributes to a positive environment for our community include: - Demonstrating empathy and kindness toward other people - Being respectful of differing opinions, viewpoints, and experiences - Giving and gracefully accepting constructive feedback - Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience - Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: - The use of sexualized language or imagery, and sexual attention or advances of any kind - Trolling, insulting or derogatory comments, and personal or political attacks - Public or private harassment - Publishing others' private information, such as a physical or email address, without their explicit permission - Other conduct which could reasonably be considered inappropriate in a professional setting ## Enforcement Responsibilities Maintainers and moderators are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Maintainers and moderators have the responsibility to investigate any potential code of conduct violation, reported or not, in order to avoid harm to the community. Maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. In case of any issues please reach out, either to any moderators or maintainers on [discord] or at . ## Scope This Code of Conduct applies within all community spaces, especially on github and on [discord] but not only, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. ## Incident report processing All incident report will be handled by maintainers and modarators. First they will immediately reply to the report to confirm receipt. This reply must be sent within 24 hours, and they should strive to respond much quicker than that. Then they will recover more data if the report does not contain enough information. They will then review the incident and determine, to the best of their ability: - what happened - whether this event constitutes a code of conduct violation - who, if anyone, has acted against the code of conduct - whether this is an ongoing situation, and there is a threat to anyone's physical or moral safety This information will be collected in writing, and whenever possible the committee's deliberations will be recorded and retained (i.e. chat transcripts, email discussions, recorded voice conversations, etc). They should aim to have a resolution agreed upon within one week. In the event that a resolution can't be determined in that time, they will respond to the reporter(s) with an update and projected timeline for resolution. In the event of any conflict of interest a member must immediately notify the other members, and recuse themselves if necessary. ## Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the maintainers and moderators responsible for enforcement on our [discord]. All complaints will be reviewed and investigated promptly and fairly. All maintainers and moderators are obligated to respect the privacy and security of the reporter of any incident. ## Enforcement Guidelines Maintainers and moderators will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: ### 1. Correction **Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. **Consequence**: A private, written warning from maintainers and moderators, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. ### 2. Warning **Community Impact**: A violation through a single incident or series of actions. **Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. ### 3. Temporary Ban **Community Impact**: A serious violation of community standards, including sustained inappropriate behavior. **Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. ### 4. Permanent Ban **Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. **Consequence**: A permanent ban from any sort of public interaction within the community. ## Attribution This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.1, available at [https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1]. Community Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder][Mozilla CoC]. For answers to common questions about this code of conduct, see the FAQ at [https://www.contributor-covenant.org/faq][FAQ]. Translations are available at [https://www.contributor-covenant.org/translations][translations]. Incident report processing was inspired by [Django Code of Conduct - Enforcement Manual][django]. [homepage]: https://www.contributor-covenant.org [v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html [Mozilla CoC]: https://github.com/mozilla/diversity [FAQ]: https://www.contributor-covenant.org/faq [translations]: https://www.contributor-covenant.org/translations [discord]: https://discord.f3d.app [django]: https://www.djangoproject.com/conduct/enforcement-manual/ ",
    "url": "/f3d/CODE_OF_CONDUCT.html",
    
    "relUrl": "/CODE_OF_CONDUCT.html"
  },"2": {
    "doc": "Contribute",
    "title": "Contribute",
    "content": "# How to Contribute F3D welcomes all contributors, regardless of skill level or experience! ## Contributing as a User Contributing to F3D can be as simple as pointing out a spelling mistake on the website, reporting a bug you encountered, or suggesting a new feature you feel would improve the application. We use [GitHub](https://github.com/f3d-app/f3d) to manage the project and you can report new issues or weigh in on existing ones via our [issue tracker](https://github.com/f3d-app/f3d/issues). Also, do not hesitate to join our [Discord](https://discord.f3d.app)! ## How to contribute to the documentation Another way to get contribute is to improve the documentation, look for typos, improve phrasing, the examples and the gallery. This does not require to build F3D or to learn C++ and is a very important work! You can follow the workflow described below. ## How to Get Started With Development To contribute to F3D as a developer, first you may want to try and build F3D for yourself. If you are already familiar with software compilation, you can take a look at our [build guide](/f3d/doc/dev/BUILD.html). If not, you may want to look at our [getting started guide](/f3d/doc/dev/GETTING_STARTED.html), that provide steps to compile F3D. Once you are able to build F3D, you may want to take a look at the open [issues](https://github.com/f3d-app/f3d/issues)! If you are a beginner, you may want to look at [\"good first issues\"](https://github.com/f3d-app/f3d/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22). If you already have some experience with programming and contribution, definitely look at [\"help wanted\"](https://github.com/f3d-app/f3d/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) issues. If an issue is interesting to you and is not yet assigned, then you should _comment on the issue_ and ask for any help or clarification needed. F3D maintainers will see your comment, assign the issue to you and provide guidance as needed. To get involved more deeply, please take a look at the [roadmaps](/f3d/doc/dev/ROADMAPS_AND_RELEASES.html) for the upcoming releases. It is also recommended to reach out on [Discord](https://discord.f3d.app) to simplify communication, but it is not required. You may also want to understand the overall [architecture](/f3d/doc/dev/ARCHITECTURE.html) of the F3D project. You can then fix the issue or implement the feature on your side and contribute it to the F3D repository by following the workflow described below. Of course, if you are already using F3D and want to improve it for your specific needs, because you want a feature or found a bug, that is definitely possible. Feel free to reach out for guidance by opening an issue or asking on [Discord](https://discord.f3d.app). ## F3D Development Workflow F3D uses [GitLab Flow](https://about.gitlab.com/topics/version-control/what-is-gitlab-flow/). In a few words, here is how to contribute: - [Fork](https://github.com/f3d-app/f3d/fork) the F3D repository on GitHub. - Create and push a feature branch on your fork containing new commits. - When it is ready for review or when you want to run the CI, create a pull request against `f3d-app/f3d/master`. - Once the PR has been created, you can run the different parts of the CI by checking checkboxes in your PR description. - Maintainers and returning contributors will provide help to interpret the CI and fix issues that may arise. - Your PR will be reviewed by maintainers and returning contributors, please take their feedback into account and resolve discussions when adresssed. - Once the PR is approved and CI comes back clean, a maintainer will merge your pull request in the master branch. - The master now contains your changes and will be present in the next minor/major release, any documentation related changes are visible in [https://f3d.app]! ## Continuous Integration F3D has pretty extensive continuous integration trying to cover all usecases for F3D. It means that if the change in your pull request breaks continuous integration, it will not be merged until it passes successfully. It also means that adding a new feature or behavior means adding an associated test. Make sure to check the results for yourself and ask for help if needed. To run the CI, just check the CI related checkboxes in your pull request and push anything to your branch. After this, the CI will always be run every time you push to your branch. F3D continuous integration will also check the coverage as it is a good way to evaluate if new features are being tested or not. When adding code to F3D, always try to cover it by adding/modifying [tests](/f3d/doc/dev/TESTING.html). F3D continuous integration also checks formatting using clang-format and other tools and will inform you if changes needs to be made. Some [formatting rules](/f3d/doc/dev/CODING_STYLE.html) are not enforced by clang-format and will be checked during the review process. When making changes to the `libf3d` public API, continuous integration will warn about making related changes to the bindings. This is required in order to merge the pull request. When making changes to the `default_versions.json` file, continuous integration will warn about updating the timestamp in the same file. This is required in order to merge the pull request. The continuous integration is just code, as the rest of F3D is. If you want to fix or improve it, you are very welcome to! ## F3D Architecture F3D is divided into different components: - The `f3d` executable, in the `application` folder. - The `libf3d` library, in the `library` folder. - The extensions to VTK, in the `vtkext` folder. - The bindings for Python, Java, and WebAssembly, in their respective folders. - The plugins, providing all the different readers in the plugins directory. The extensions to VTK are divided into two modules: - The [private module](vtkext/private) is used exclusively by `libf3d`. - The [public module](vtkext/public) is used by `libf3d` and also by plugins. Additional documentation can be found in [PLUGINS.md](/f3d/doc/libf3d/PLUGINS.html). The `libf3d` library implements the whole logic of instancing and manipulating the different VTK classes, it is fully documented in the [libf3d README](/f3d/doc/libf3d/README_LIBF3D.html). The `f3d` executable itself uses `libf3d` and adds an application layer on top of it, especially the handling of [command line options](/f3d/doc/user/OPTIONS.html) and a [configuration file](/f3d/doc/user/CONFIGURATION_FILE.html). ",
    "url": "/f3d/CONTRIBUTING.html",
    
    "relUrl": "/CONTRIBUTING.html"
  },"3": {
    "doc": "License",
    "title": "License",
    "content": "BSD 3-Clause License - Copyright 2019-2021 Kitware SAS - Copyright 2021-2025 Michael Migliore, Mathieu Westphal All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "url": "/f3d/LICENSE.html",
    
    "relUrl": "/LICENSE.html"
  },"4": {
    "doc": "Home",
    "title": "Home",
    "content": "[![CI](https://img.shields.io/github/actions/workflow/status/f3d-app/f3d/ci.yml?label=CI&logo=github)](https://github.com/f3d-app/f3d/actions/workflows/ci.yml) [![Packaging](https://img.shields.io/github/actions/workflow/status/f3d-app/f3d-superbuild/nightly.yml?label=Packaging&logo=github)](https://github.com/f3d-app/f3d-superbuild) [![codecov](https://codecov.io/gh/f3d-app/f3d/branch/master/graph/badge.svg?token=siwG82IXK7)](https://codecov.io/gh/f3d-app/f3d) [![Downloads](https://img.shields.io/github/downloads/f3d-app/f3d/total.svg)](https://github.com/f3d-app/f3d/releases) [![Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86)](https://github.com/sponsors/f3d-app) [![Discord](https://discordapp.com/api/guilds/1046005690809978911/widget.png?style=shield)](https://discord.f3d.app) [![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](CODE_OF_CONDUCT.md) # F3D - Fast and minimalist 3D viewer By Michael Migliore and Mathieu Westphal. F3D (pronounced `/fɛd/`) is a fast and minimalist 3D viewer desktop application. It supports many file formats, from digital content to scientific datasets (including glTF, USD, STL, STEP, PLY, OBJ, FBX, Alembic), can show animations and support thumbnails and many rendering and texturing options including real time physically based rendering and raytracing. It is fully controllable from the command line and support configuration files. It can provide thumbnails, support interactive hotkeys, drag&drop and integration into file managers. F3D also contains the libf3d, a simple library to render meshes, with a C++17 API, Python Bindings, and experimental Java and Javascript bindings. _A typical render by F3D_ _Animation of a glTF file within F3D_ _A direct scalars render by F3D_ See the [gallery](/f3d/doc/GALLERY.html) for more images, take a look at the [changelog](/f3d/doc/CHANGELOG.html) or go to the [install guide](/f3d/doc/user/INSTALLATION.html) to download and install F3D! You can even use F3D directly in your [browser](https://f3d.app/web)! If you need any help or want to discuss with other F3D users and developers, head over to our [discord](https://discord.f3d.app). # Quickstart Open a file directly in F3D or from the command line by running: ``` f3d /path/to/file.ext ``` Optionally, append `--output=/path/to/img.png` to save the rendering into an image file. See the [Quickstart Guide](/f3d/doc/user/QUICKSTART.html) for more information about getting started with F3D. # Documentation - To get started, please take a look at the [user documentation](/f3d/doc/user/README_USER.html). - If you need any help, are looking for a feature or found a bug, please open an [issue](https://github.com/f3d-app/f3d/issues). - If you want to use the libf3d, please take a look at its [documentation](/f3d/doc/libf3d/README_LIBF3D.html). - If you want to build F3D, please take a look at the [developer documentation](/f3d/doc/dev/README_DEV.html). # Support F3D needs your help! If you can, please consider sponsoring F3D. Even a small donation would help us offset the recurring maintenance costs. With enough sponsors we would be able to make F3D grow faster and stronger! Read more about it [here](/f3d/doc/user/SPONSORING.html). If you are an industry user of F3D and want to make sure it can keep growing and being maintained, [please reach out](/f3d/doc/user/SPONSORING.html#industry-sponsors)! In any case, please star it on github and share the word about it! # Vision As a minimalist 3D viewer F3D aims to: - Support as many 3D file formats as possible - Support many types of renderings (textures, edges, etc... ) and visualizations (meshes, volumic, point sprites) - Support any and all use-cases dealing with 3D datasets - Let any user easily and quickly view any model with good defaults - Be as configurable as possible - Be fully controllable from the command line and configuration file - Be usable non-interactively - Be as modular as possible to be built with a small number of dependencies but there is no plan to: - Provide a classic mouse-based UI, with menus and buttons - Provide data processing tools - Provide export feature # Contributing F3D as a community-driven, inclusive and beginner-friendly project. We love to see how the project is growing thanks to the contributions from the community. We would love to see your face in the list below! If you want to contribute to F3D, you are very welcome to! Take a look at our [contribution documentation](/f3d/CONTRIBUTING.html), [governance documentation](/f3d/doc/dev/GOVERNANCE.html) and [code of conduct](/f3d/CODE_OF_CONDUCT.html). # Acknowledgments F3D was initially created by [Kitware SAS](https://www.kitware.eu/) and is relying on many awesome open source projects, including [VTK](https://vtk.org/), [OCCT](https://dev.opencascade.org/), [Assimp](https://www.assimp.org/), [Alembic](http://www.alembic.io/), [Draco](https://google.github.io/draco/), [OpenUSD](https://openusd.org/release/index.html), [OpenVDB](https://www.openvdb.org/), [OSPRay](https://www.ospray.org/) and [ImGui](https://github.com/ocornut/imgui/). # License F3D can be used and distributed under the 3-Clause BSD License, see the [license](/f3d/LICENSE.html). F3D integrate the sources of other libraries and tools, all under permissive licenses, see the [third party licenses](/f3d/doc/THIRD_PARTY_LICENSES.html). F3D packages relies on other libraries and tools, all under permissive licenses, all listed in the respective packages. ",
    "url": "/f3d/",
    
    "relUrl": "/"
  },"5": {
    "doc": "Changelog",
    "title": "Changelog",
    "content": "# Changelog ## v3.1.0 For F3D users: - Added support for reading Quake MDL files - Added support supersampling anti aliasing and enable it for thumbnails - Added support for displaying metadata with assimp formats (FBX and more) - Added support for `--up` vector to be any direction - Added support for parsing color options with syntax: `#ff00ff`, `hsv(240 , 100% , 100%)` and more - Added support for parsing direction options with syntax: `+X`, `-z+y` and more - Added support for parsing path options with syntax: `~/path/to/../to/relative/file.ext` - Added support for parsing colormap options with syntax: `val, color, val, color,....` - Added bind to increase opacity (`Ctrl+P`) and decrease opacity (`Shift+P`) - Added report of config file locations being checked - Added support for imperative (force) option in configuration files - Added XDG support for cache location - Added support for history and command action in console - Added a `remove_file_groups` command - Added `increase_opacity` and `decrease_opacity` commands - Added `alias` command to create aliases of other commands - Added support for setting and resetting libf3d options from CLI using `--define` and `--reset` - Added many reader specific options that can be controlled using `--define` - Added PWA support to F3DWeb - Added support for url-params in F3DWeb - Improved documentation - Changed report of Unset value to `Unset` instead of `N/A` in cheatsheet - Changed dropzone to be implemented using ImGui - Fixed an issue where scalar bar and axis displayed on top of console - Fixed zsh completion - Fixed multiple OBJ related loading issues - Fixed multiple assimp related loading issues - Fixed crashes when opening PLY files - Fixed a crash when opening multiple USD files - Fixed cheatsheet location - Fixed final-shader to only be applied on VTK rendering - Fixed an issue when using camera shortcut and then interacting - Fixed config file location on macOS - Fixed multiple issues where exceptions would result in errors - Removed skip frame logic with animations after fixes in VTK For libf3d users: - Added parsing/formatting for `color_t` - Added parsing/formatting for `direction_t` - Added parsing/formatting for `std::filesystem::path` - Added parsing/formatting for `colormap_t` - Changed color options to use actual type `color_t` - Changed direction options to use actual type `direction_t` - Changed path options to use actual type `std::filesystem::path`. Note that path should now be collapsed. - Changed colormap_t options to use actual type `colormap_t` For F3D packagers: - Fixed compatibility with FreeBSD - Fixed reproducible build for man generation For F3D plugin developers: - Added support for reader specific options ## v3.0.0 For F3D users: - BREAKING CHANGE: [Configuration files](https://f3d.app/doc/user/CONFIGURATION_FILE.html) have changed syntax - BREAKING CHANGE: Removed all deprecated options - BREAKING CHANGE: `--scalars` have been split into `--scalar-coloring` and `--coloring-array` CLI options - BREAKING CHANGE: `=` must be used for CLI Options, `--option value` is not supported anymore - BREAKING CHANGE: Removed `geometry-only` and `group-geometries` and added `multi-file-mode` option for more flexible loading of multiple files - BREAKING CHANGE: There is no headless specific binary release anymore, just use the standard binary with `--rendering-backend=egl` - BREAKING CHANGE: `--dry-run` has been renamed `--no-config` - BREAKING CHANGE: `Esc` to quit the app has been changed to `Ctrl+Q` - BREAKING CHANGE: `--animation-frame-rate` has been replaced by `--frame-rate` - BREAKING CHANGE: Renamed `--bg-color` into `--background-color` - BREAKING CHANGE: Renamed `--comp` into `--coloring-component` - BREAKING CHANGE: Removed the `?` interaction to dump info, use [commands](https://f3d.app/doc/user/COMMANDS.html) instead - BREAKING CHANGE: Renamed `--progress` into `--loading-progress` - BREAKING CHANGE: Renamed `--cells` into `--coloring-by-cells` - BREAKING CHANGE: Renamed `--range` into `--coloring-range` - BREAKING CHANGE: Renamed `--bar` into `--coloring-scalar-bar` - BREAKING CHANGE: Renamed `--inverse` into `--volume-inverse` - BREAKING CHANGE: Renamed `--samples` into `--raytracing-samples` - BREAKING CHANGE: Renamed `--denoise` into `--raytracing-denoise` - BREAKING CHANGE: Renamed `--ref` into `--reference` and `--ref-threshold` into `--reference-threshold` - BREAKING CHANGE: Renamed `--readers-list` into `--list-readers` - BREAKING CHANGE: F3D binary release is now built with GCC9 - Changed the logo! - Reworked the UI using ImGui - Added support for specifying interactions in config files, [see doc](https://f3d.app/doc/user/CONFIGURATION_FILE.html#bindings) - Added a `--command-script` CLI option - Added a tiny file dialog, just press `Ctrl+O` - Added support for armature visualization with `--armature` CLI option (glTF only) - Added support for keeping camera position when switching files, just press `Ctrl+Arrow` - Added a ImGui based console to input [commands](https://f3d.app/doc/user/COMMANDS.html) by pressing `Esc` - Added a \"Save minimal screenshot\" interaction by pressing `Shift+F12` - Added error reporting when loading a file failed for some reason - Added missing config file for .brep files - Added support for .xbf files - Added `--input` CLI option - Added support for libf3d option in configuration files - Added support for parsing option based on their type, see [the doc](https://f3d.app/doc/user/PARSING.html) - Added a `--rendering-backend` option to select the rendering backend, including headless - Added an interaction to rotate camera 90 degrees by pressing 4/6 - Added an interaction to drop only HDRI (Shift+Drop) and an interaction to drop only 3D files (Ctrl+Drop) - Added a `--list-bindings` CLI option - Added a `--list-rendering-backends` CLI option - Added compatibility with [VFX CY2025](https://vfxplatform.com/) - Added commands to print info about scene, coloring, mesh and options - Added command to clear the console - Added support for expanding tilda (`~`) into `HOME` when inputting any path - Reworked CLI option parsing to avoid parsing issues - Improved `--list-readers` CLI option output - Improved image comparison algorithm - Improved options suggestion in the command line - Improved many features in F3DWeb as well as adding OCCT and Draco support - Improved the webassembly bindings - Improved the documentation - Improved python bindings - Improved startup performance - Improved scalar range handling with animation - Fixed a crash when opening a glTF file with no textures - Fixed an option priority issue with `--help` - Fixed a crash with invalid `--animation-index` and assimp - Fixed an issue where the window displayed an empty filename - Fixed an issue where the window resolution was reset when changing file - Fixed an issue when resetting the camera and using `--camera-index` - Fixed an issue with `--camera-index` being overridden by other camera options - Fixed an issue when loading a time value outside of the range - Fixed issues with screenshot templating - Fixed an issue with grid rendering on main axes - Fixed an issue where color-bar would show when not needed - Fixed an issue with glTF file using URI - Fixed `--help` invalid output - Fixed a small issue with F3D dialog being incorrectly named on macOS - Fixed an issue where file where open two times on macOS For libf3d users: - BREAKING CHANGE: All deprecated methods have been removed - BREAKING CHANGE: `engine::libInformation` members have been changed - BREAKING CHANGE: `options` API has been rewritten from scratch, see the doc - BREAKING CHANGE: `options` many options are now optional - BREAKING CHANGE: `loader` API has been replaced by a new class: `scene` - BREAKING CHANGE: `engine` creation API has been rewritten from scratch and a `context` class has been added. - BREAKING CHANGE: `interactor`: `setKeyPressCallBack`, `setDropFilesCallBack` and `timerCallback` have been removed - BREAKING CHANGE: `camera` API has been reworked - BREAKING CHANGE: `image::compare` API has been changed - BREAKING CHANGE: libf3d API is now using C++17, `nodiscard`, `std::filesystem` and `std::string_view` are now used whenever it makes sense - BREAKING CHANGE: Removed support for python 3.8 - Added an `interactor::command*` API that lets user control the libf3d behavior more finely - Added an `interactor::binding*` API that lets user control how the libf3d respond to interactions - Added an `scene::loadAnimationTime` API to select animation time to load - Added `interactor::start` arg to control an event loop time and a event loop callback - Added python stubs for autocompletion and IDE integration - Added support for python 3.13 - Fixed an issue with instanciang multiple engines - Added an `utils::collapsePath` - Fixed an issue with HiDPI when using the libf3d on Windows For F3D packagers: - BREAKING CHANGE: Removed compatibility with older version of VTK. VTK v9.2.6 is now required. - Added a new CMake options to build python stubs: `F3D_BINDINGS_PYTHON_GENERATE_STUBS` - Added a new optional but internally provided dependency: tinyfiledialogs - Modified dmon dependency to be optional - `F3D_LINUX_APPLICATION_LINK_FILESYSTEM` has been renamed `F3D_LINUX_LINK_FILESYSTEM` and is now OFF by default For F3D plugin developers: - Added a vtkF3DImporter and vtkF3DGLTFImporter for easier subclassing ## v2.5.1 For F3D packagers: - Added compatibility with VTK v9.4.0 ## v2.5.0 For F3D users: - Added a Webassembly version available online: https://f3d.app/web - Added a \"neutral\" tone mapping feature - Added an screenshot feature when pressing F12, with its dedicated option, `--screenshot-filename` - Added a `--final-shader` option to customize post-processing. - Added a `--grid-color` option to set the color of the grid - Added a `--animation-progress` option to control if the animation progress bar should be shown - Added a `--backface-type` option to control backface visibility - Added a concept of filename [template](https://f3d.app/doc/user/OPTIONS.html#filename-templating) for saving screenshots and outputs - Added native menus for macOS - Improved documentation all around - Reworked config file logic to avoid duplicating of the default config - Fixed a long standing issue with FBX skinning animation - Fixed zsh completion - Fixed an opacity blending issue - Fixed a crash when dropping a HDRI while playing an animation - Fixed a focus issue on macOS - Fixed a high DPI issue on Windows For libf3d users: - Added an API to control camera pan and zoom - Added a tkinter python example - Exposed log level in the python API For F3D packagers: - Fixed compatibility with CMake 3.29.1 - Fixed compatibility with OCCT 7_8_0 - Fixed build reproducibility by removing a path from the binary ## v2.4.0 For F3D users: - Added a new option `--point-type` used to specify how to display points sprites - Added support for 3D Gaussians Splatting in binary `.splat` format - Added ability to cycle through available animations by pressing `W` hotkey - Added display of current animation name within cheatsheet - Added orthographic camera projection option (`--camera-orthographic`) and binding (`5`) - Added proper continuous integration for MacOS ARM64 - Added support for glTF Draco encoded file - Added support for dark title bar on Windows - Added support for colormap presets, using `--colormap-file` option - Added a option to reload file automatically when changed on disk (`--watch`) - Added support for streaming output images to stdout, using `-` filename - Added animation support to Alembic plugin - Improved OCCT plugin (STEP and IGES files) performance drastically - Improved config file parsing so that it is parsed in file order - Fixed an issue with blur circle of confusion - Fixed an issue with the grid being clipped - Fixed an issue with STEP file coloring - Fixed an issue when time range was not starting at zero - Fixed an issue when record file does not exist - Fixed an issue when using `--no-render` and `--hdri` - Fixed an issue with the Windows thumbnailer with process never properly killed - Fixed an issue where OCCT would output to terminal - Fixed an issue with FISH completion For libf3d users: - Added a new option `model.point-sprites.type` used to specify how to display points (only if `model.point-sprites.enable` is true) - Added a `image::toTerminalText` method to print image to terminal text - Added an `image` metadata API - Added a `vtkext` module for plugin developer, see the [documentation](https://f3d.app/doc/libf3d/PLUGINS.html) - Added a new f3d component to find_package of, `pluginsdk`, require to build plugins against F3D For F3D packagers: - Added a CMake report at the end of configuration - Added a new cmake installation component, `plugin_sdk`, needed to compile external plugin against F3D - Added a new cmake installation component, `colormaps`, needed for the colormap feature - Fixed multiple issue with static (`BUILD_SHARED_LIBS=OFF`) build - Fixed a compilation issue with gcc14 - Fixed a compilation issue with OCCT 7.8.0 ## v2.3.0 For F3D users: - Added `--animation-autoplay` option (libf3d: `scene.animation.autoplay`) to automatically start animation on file load - Added an experimental `vdb` plugin in order to read .vdb files using OpenVDB - Added an `usd` plugin in order to read .usd files using OpenUSD - Added .3mf and .x files support in the `assimp` plugin - Added a small margin between the model and the grid to avoid potential z-fighting - Added VTK output to the log when using `--verbose=debug` for easier debug - Reworked the `alembic` plugin to read Texture Coordinates and Normals for .abc files - Improved the reading of EXR files using multi-threading for better performance when loading HDRIs - Improved the documentation on https://f3d.app - Improved general logging in order to make it easier to understand issues with file and options - Fixed potential crashes when reading `assimp` plugin file formats - Fixed `--grid-absolute` for off-center models - Fixed an issue with thumbnail generation showing the log window - Fixed many interaction issues on non-Qwerty keyboard layout - Fixed handling of filenames containing commas - Fixed an issue on Windows where the log window would appear on top of F3D window - Fixed crashes with specific .obj file - Fixed an issue with incorrect return code when using headless mode or incorrect options - Fixed dependency issue with the headless .deb binary release - Fixed a crash when using a file with more than 254 bones (Requires OpenGL 4.3) - Fixed an issue with Unicode filenames on the title bar on Windows - Fixed an issue where focal point picking would generate error messages - Changed `--verbose` into a string based option, eg: `--verbose=quiet` or `--verbose=debug`. `--verbose` is still supported. - Changed `--no-render` behavior so that it doesn't impact verbosity anymore - Changed the default configuration file so that translucency support is enabled by default - Deprecated `--quiet`, use `--verbose=quiet` instead - Deprecated `--input`, use positional argument instead For libf3d users: - Added `scene.animation.autoplay` option - Added a `f3d::image::saveBuffer` API to save an image as a file format in memory - Fixed the default name of the window For F3D packagers: - Added a new optional dependency, OpenUSD. Enable with `F3D_PLUGIN_BUILD_USD` CMake option - Added a new optional dependency through VTK, OpenVDB. Enable with `F3D_PLUGIN_BUILD_VDB` CMake option - Added a new CMake option to control the link against libatomic. Control with `F3D_LINUX_LIBRARY_LINK_ATOMIC` - Added two new packages to the list, OpenMandriva and Mageia ## v2.2.1 For F3D users: - Added a native Apple Silicon release package - Added new options `hdri-file`, `hdri-ambient`, `hdri-skybox` to have more control on the HDRI behavior - Added a default HDRI used when providing no `hdri-file` - Added bindings to toggle HDRI ambient lighting (`F`) and HDRI skybox (`J`) - Added bindings to move the camera to standard locations: `1`: Front, `3`: Right, `7`: Top, `9`: Isometric - Added [Open CASCADE BRep format](https://dev.opencascade.org/doc/overview/html/specification__brep_format.html) to the OCCT plugin. - Fixed an infamous issue when the Windows thumbnailer always steal the focus - Fixed an issue with the binary release when opening draco files - Fixed an issue with matcap textures - Fixed an issue with HDRI lighting - Fixed an issue with HDRI lighting when dropping HDRI after a model - Fixed an issue where invalid option would not show on Windows - Fixed an issue where previously loaded file would stay visible - Fixed an issue when loading invalid EXR file as HDRI - Fixed cheatsheet menu rendering under 'Drop File Instructor' - Fixed raytracing rendering issues - Improved cheatsheet menu contrast for any background color - Improved overall text contrast for any background color - Improved performance when changing model and using a HDRI - Improved HDRI cache performance - Deprecated `hdri` option For libf3d users: - Reworked image API to support many file formats to read (EXR, HDR) and write (PNG, JPG, TIF, BMP) - Added `render.hdri.file`, `render.hdri.ambient`, `render.background.skybox` options. - Deprecated `render.background.hdri` in favor of new options above - Deprecated previous image API - Add `loader::loadGeometry` allowing loading geometry from memory buffers For developers: - Added a deprecation framework - Removed `F3D_TESTING_ENABLE_HDRI_TESTS` cmake option and merged it with `F3D_TESTING_ENABLE_LONG_TIMEOUT_TESTS` - Added a Getting Started guide for beginners developers For F3D packagers: - Fixed compatibility with FreeBSD ## v2.1.0 For F3D users: - Reworked Animation support and added many animation related options - Added `--camera-direction` and `--camera-zoom-factor` and use it in default config file - Added `--texture-matcap` option to load a MatCap texture - Added support for opening HDRI background with Drop - Added .exr support for HDRI and textures - Improved HDRI caching performance - Added a EGL headless binary release - Added typo suggestion when failing to use the right option name - Added `--invert-zoom` option (libf3d: `interactor.invert-zoom`) to invert zoom direction with right-click on mouse - Added support for keeping camera position when reloading a file with `UP` key - Added a `--grid-absolute` option (libf3d: `render.grid.absolute`) to position the grid instead of being below the model - Added a \"Drop Zone\" when starting F3D without loading a file - Added coloring support for STEP files in binary release - Fixed an issue on Windows where the error window would popup even with `--quiet` - Fixed an issue with 16 bit and 32 bit textures with assimp plugin - Fixed an issue on Windows where errors where not visible - Fixed an HDRI issue on reload - Fixed a crash when with the progress bar on reloading a file - Fixed an issue where certain options from config file would be ignored - Fixed a crash with many GLTF files when an array does not have a name - Fixed an issue where dropping a duplicate file would change the loaded file instead of not doing anything - Fixed an issue when loading an unsupported file - Fixed an issue with VRML files - Improved config file for .ply files - Improved config file regex so that they are case-insensitive - Improved `--up` option to support no sign and better validation - Improved F3D version reporting about itself and VTK (`--version`) - Improved documentation, testing, help - Excluded TIFF format from Windows Thumbnailer - Changed the automatic camera position to a version more close to the data - Reduced size of binary release by a factor of two For developers: - Added vcpkg support for dependency installation For F3D packagers: - Added a `F3D_PLUGIN_OCCT_COLORING_SUPPORT` CMake variable to control if this feature is compiled, default is ON - Added `SONAME` support - Added a `F3D_PLUGINS_INSTALL_DIR` CMake variable to control where to install plugins - Added a new module: `F3D_MODULE_EXR` that depends on openexr - Added support to use external `cxxopts` and external `nlohmann-json` - Fixed a link issue with VTK modules - Fixed a `@loader_path` issue on MacOS - Added support for `CMAKE_INSTALL_*DIR` variables on installation - Added support for building against a EGL enabled VTK - Fixed a compilation issue with VTK master Contributors: @DeveloperPaul123 @topazus @bkmgit @snoyer @Meakk @mwestphal ## v2.0.0 For F3D users: - Removed `--fullscreen` options completely - Added a `--position` option to set the position of the F3D window - Added a `--light-intensity` option and associated bindings - Improved fish and zsh completion - Added a new interaction to center the camera on the point under the cursor using _middle_ mouse button - Added HDRi caching for improved performance - Added scene bounding box to the dump interaction - Reworked lighting for fullscene format files - Improved grid rendering and customization greatly with new options - Improved HDRi blur performance and customization - Added support for reading config file directory instead of a single file - Changed config file location on Windows - PostFX option names have been changed - Added an interaction (down arrow) to load all files from the directory containing the current file - Added a `--group-geometries` option to load multiple default scene file into a single render window For libf3d users: - Reworked loader API from scratch - Fixed an issue with engine creation in the Python bindings - Fixed an issue with image Python bindings - Improved libf3d examples - Added experimental javascript bindings based on webassembly/emscriptem - Added dynamic support for all `model` options - Added plugin SDK to create your own plugins for any file format For F3D packagers: - Added plugins support for true optional dependencies - Added a `F3D_APPLICATION_LINK_FILESYSTEM` CMake option to control if F3D should link explicitly against libstdc++fs - Removed most of `F3D_INSTALL_` options with the switch to a component-based approach - Removed installation of useless static libs from VTKExtensions (needs VTK master) - Fixed RPATH of F3D for system using lib64 instead of lib - Many CMake option name changed - Fixed data license to use only permissive license for F3D testing data - Removed packaging support from F3D Contributors: @snoyer @mzf-guest @CharlesGueunet @myd7349 @allemangD @Meakk @mwestphal ## v1.3.1 - Fix raytracing support - Fix macOS window positioning Contributors: @mwestphal @Meakk ## v1.3.0 Main new features and fixes: - Introducing an alpha version of the libf3d, see below for more information - Added a --font-file option - Added support for Alembic file format (.abc). Geometry only. Thanks a lot @nyue. - Fixed many HDRI issues - Fixed an important drag and drop issue on linux Other fixes: - Fixed many doc and UI typos - Fixed shell completion - Fixed multiple issue with image comparison - Fixed an issue with --line-width and --point-size with full scene formats - Fixed an issue with translucent object and RGBA texture - Fixed issues with a few specific .gltf files - Fixed a window title issue on MacOS - Fixed multiple issues with the output window on Windows - Fixed issues with file association and thumbnails on Windows - Fixed a small issue with the cheatsheet not appearing in some cases - Fixed an issue with certain .obj files - Fixed a clipping issue when setting camera position - Removed fullscreen hotkey For F3D developers: - Updated cxxopts to 3.0.0 - Now using json.hpp for parsing json config file - Better reproducible build support - Improved CI with coverage, sanitizer, dedicated actions for dependencies - Complete rework of the architecture to separate F3D, the application, the libf3d (see below) and a VTKExtensions layer. - Improved unit testing by adding test in the libf3d and VTKExtensions layer For libf3d users: - Introducing an alpha version of the libf3d! - The libf3d is a C++ library to open and render 3D meshes, it is of course used by F3D and supports python bindings - More info available in README_libf3d.md Binary Release Information: - The binary release is **not** built with raytracing support - This binary release is built with assimp 5.1.2, animation for assimp formats is not working well Contributors: @schuhumi @herrriehm @rafcon-dev @mzf-guest @nyue @jpouderoux @Meakk @mwestphal ## v1.2.1 Bug fixes and features: - Fixed a build issue on MacOS - Fixed a critical issue with the Windows Thumbnailer that could crash explorer.exe - Fixed the --quiet option so that it actually quiets VTK errors and warnings - Fixed an issue with output window popping up at each log on Windows - Added a `.deb` package for Linux Debian-based distros For Packagers: - LFS file have been added in source code release, this seems to be retroactive, so hash of previous releases may have changed - Flatpack org name has been fixed Contributors: @Meakk @mwestphal @jpouderoux ## v1.2.0 Main New Features: - Added STEP and IGES file format support thanks to @Open-Cascade-SAS /[OCCT](https://github.com/Open-Cascade-SAS/OCCT) (thanks @drtrigon) - Added FBX, DAE, OFF, and DXF file format support thanks to @assimp /[assimp](https://github.com/assimp/assimp) - Added thumbnail support with many linux file managers - Added thumbnail support on Windows - Added desktop environment integration in linux - Added scalar and scalar component looping Other New Features: - Added support for KHR_materials_unlit with glTF files (thanks @spiraloid) - Added option for selecting camera `--camera-index` (thanks @spiraloid) - Added coloring the to Windows error output window - Added a man entry on Linux - Added a `--config` option to select a config file to load instead of using default location - Added a `--quiet` option - Added `--camera-azimuth` and `--camera-elevation` options (thanks @tatsuya-s) - Added a metainfo.xml file (thanks @kevinsmia1939) Issue Fixes: - Fixed an issue with opening files with accented char in the name on Windows (thanks @shankarsivarajan) - Fixed HDRI orientation with --up option (thanks @truhlikfredy) - Fixed an issue with point cloud rendering - Fixed a crash on exit on Windows - Fixed an issue with fullscreen window size on Windows - Fixed offscreen rendering (`--output` and `--ref` ) to actually use offscreen rendering - Fixed a memory leak when no rendering is performed (thanks @CharlesGueunet) - Fixed a rendering issue with certain GPU drivers - Fixed tone mapping with background opacity - Fixed non-working drag and drop implementation in VTK (thanks @msbit) - Fixed a potential sorting issue when opening a folder - Fixed a crash with unsupported glTF files in VTK For Developers: - Full rework of the CI framework, including coverage report support - Full rework of the testing framework - Separation of vtkF3DRenderer in two classes - Separation of f3d executable into a libf3d library and f3d executable to support windows thumbnails For Packagers: - New CMake options to select file to install, all documented and starting with F3D\\_ - mime types file can be installed, make sure to trigger update-mime-databse - desktop file can be installed, make sure to trigger update-desktop-database Packagers: AndnoVember @jokersus @kevinsmia1939 @yurivict @bcdarwin @mzf-guest @Meakk @mwestphal Binary Release Information: - The binary release is **not** built with raytracing support - This binary release is built with assimp 5.1.2, animation for assimp formats is not working well Contributors: @CharlesGueunet @kevinsmia1939 @mzf-guest @jpouderoux @Meakk @mwestphal ## v1.1.1 A patch release dedicated to package managers that makes F3D v1.1 compatible with vtk v9.1.0 - Fix a render pass build issue with vtk 9.1.0 - Fix a renderer build issue with vtk 9.1.0 Contributors: @Meakk @mwestphal ## v1.1.0 New Important Features: - **Added direct scalars color rendering mode**, see doc. - **Added a turntable interactor** and made it default. The previous interactor can still be used using a dedicated option. Thanks @orangebowlerhat @filip.sund and @jjomier for your suggestions. - **Added animation support** for glTF and Exodus files. Press space for playing the animation. - Added animation related option, --animation-index, only for glTF when using the full scene. New Readers and format compatibility features: - Added skinning and morphing support with glTF files. - Added TIFF format support. Thanks @proudot for your suggestion. - Added exodus format support. Thanks @gvernon for your suggestion. - Added support for OBJ with color directly inside of it instead of using a .mtl file. Thanks @Chenge321 for your suggestion. Quality of life features: - Added a hotkey (UP) to reload current file, thanks @caioaao. - Improved Alpha blending performance, thanks @paul.lafoix. - Changed the progress bar to a more nice looking one and made it appears only if loading takes time. Thanks @finetjul for the suggestion. - Improved logging mechanism with color on all OS and a dedicated output window on windows. - Added a warning when using RayTracing but it is not available. Fixes: - Fixed an issue with skybox and edges. - Fixed a crash when an array had no name. - Fixed a window naming issue on OSX. - Fixed a symlink issue. - Fixed a coloring issue with dataset containing only cell data. Packaging: - Upgraded the AUR f3d package to 1.1.0 : https://aur.archlinux.org/packages/f3d. - Added a Brew f3d 1.1.0 package : https://formulae.brew.sh/formula/f3d. - FreeBSD now contains a f3d 1.1.0 package, thanks to yuri@freebsd.org. - NixOS now contains a f3d package, 1.1.0 should come soon, thanks to bcdarwin@gmail.com. How to support F3D: - Use the software. - Share it with anyone interested. - Star us on github: https://github.com/kitware/F3D. Note: Binaries have no raytracing support. Contributors: @Meakk @mwestphal ## v1.0.1 - VisualStudio Runtime is now included into the windows release - Ensure VTK compatibility - Improve STL binary reader performances - Fix default configuration issues - Add support for Window icon on all OSes Note: Binaries have no raytracing support. Contributors: @Meakk @mwestphal ## v1.0.0 - Documentation - Online documentation based on Hexo (https://kitware.github.io/F3D/) - Rendering - Add volume rendering for 3D images - HDRI support (skyboxes, HDR files, Filmic tone mapping) - Point sprites for displaying point clouds - Color map customization (default one changed to “inferno”) - Interface - Drag&Drop files support - Supports opening of several files (or folder), use left/right arrow to navigate - Scalars field handling improvements - Cheat Sheet - Interactive hotkeys have been reworked - File association on Windows and OSX - Fullscreen mode - No background mode (useful when saving image to a PNG file with alpha channel) - Command line - Camera configuration - Metadata (field data) display - File name display - No render mode (useful to read information in the file) - Shell completion (supports bash, zsh, fish) - New readers - CityGML - PTS - Packages - Default config provide Note: Binaries have no raytracing support. Contributors: @Meakk @mwestphal @hlngrandmontagne Paul Lafoix ## v0.1.1 - Fixes `--version` and `--help` crash Contributors: @Meakk @mwestphal @jpouderoux ## v0.1.0 First release! Contributors: @Meakk @mwestphal @jpouderoux ",
    "url": "/f3d/doc/CHANGELOG.html",
    
    "relUrl": "/doc/CHANGELOG.html"
  },"6": {
    "doc": "Gallery",
    "title": "Gallery",
    "content": "# Gallery Examples renderings with their associated command lines. Images and videos displayed below use public datasets, you can download them [here](https://drive.google.com/file/d/1hYGAHr67T7tBrUKFrCF_uc_jnvJaQF-A/view?usp=sharing). _Animated realistic rendering_: `f3d gearbox/scene.gltf --hdri-file=future_parking_2k.hdr -fjuqxtgas` _Animated, skinned and morphed rendering_: `f3d dota/scene.gltf --hdri-file=future_parking_2k.hdr -fjuqxtgas` _Animated scientific visualization rendering_: `f3d can.ex2 -xtgans --up=+Z --scalar-coloring --coloring-array=VEL --animation-speed-factor=0.005` _3D Gaussians Splatting_: `f3d counter.splat --point-sprites-size=1 --point-sprites-type=gaussian -soynxz --up=-Y --camera-position=0,1,-5.2 --camera-focal-point=0,1,0` _Direct scalars rendering of a point cloud_: `f3d Carola_PointCloud.ply --point-size=0 --coloring-component=-2 -sofj --coloring-array=RGBA --up=+Z --hdri-file=venice_sunset_8k.hdr` _Raytraced CAD assembly_: `f3d 202.vtp -xtgans -rd --raytracing-samples=10 --coloring-range=-2,9` _Volume rendering of a security bag scan_: `f3d backpack.vti -vmn --coloring-range=300,1000 --colormap=0,#000000,1,#ffffff` _Realistic rendering #1_: `f3d DamagedHelmet.glb --hdri-file=lebombo_4k.hdr -fjtuqap` _Showcase of interactive widgets_: `f3d dragon.vtu -xtganse --coloring-component=0` _Metallic Rendering of a STEP file_: `f3d eta_asm.stp --hdri-file=future_parking_2k.hdr -fjuqxtga --up=+Z --metallic=1 --roughness=0.6 --color=0.98,0.90,0.59 --scalar-coloring=false` _Rendering of a FBX file_: `f3d zeldaPosed001.fbx --hdri-file=hikers_cave_2k.hdr -fjuqxtga --light-intensity=1.5` _Realistic rendering #2_: `f3d FlightHelmet.glb --hdri-file=lebombo_4k.hdr -fjtuqap` _Visualization of a CFD velocity field_: `f3d single-pin.vtp -xtbgans --coloring-range=-2,8 --colormap=0,0.3,0.7,0,0.7,0,0.1,1,1,0.8,0.8,0` _Volume rendering of a medical skull scan_: `f3d skull.vti -vxbt --coloring-range=40,200 --camera-direction=1,0,0` _Point cloud rendering using sprites_: `f3d pointCloud.vtp -o --point-size=0.2 --colormap=0,0,0.8,0,0.4,0.9,0,0,0.8,0.9,0.9,0,1,0.5,0.5,1 --up=+Z` ## Acknowledgments - Bristleback DOTA Fan-Art by [Nikolay_Tsys](https://sketchfab.com/Tolst). - SY Carola (point cloud) by [Scottish Maritime Museum](https://sketchfab.com/ScottishMaritimeMuseum) - Gearbox Animation by [DZHUSI ØNE](https://sketchfab.com/dzhusione) - Watch movement by [Greg Brown](https://grabcad.com/greg.brown) - Zelda - Breath Of The Wild by [theStoff](https://sketchfab.com/theStoff) - Venice Sunset HDRI and Hiker’s Cave HDRI by [Greg Zaal](https://polyhaven.com/hdris?a=Greg%20Zaal) - Future Parking HDRI by [Sergej Majboroda](https://polyhaven.com/hdris?a=Sergej%20Majboroda) ",
    "url": "/f3d/doc/GALLERY.html",
    
    "relUrl": "/doc/GALLERY.html"
  },"7": {
    "doc": "Third Party Licenses",
    "title": "Third Party Licenses",
    "content": "# Third Party Copyrights and License within F3D application source ## cxxopts.hpp: ``` Copyright (c) 2014, 2015, 2016, 2017 Jarryd Beck Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` ## json.hpp: ``` __ _____ _____ _____ __| __| | JSON for Modern C++ | |__ | | | version 3.10.5 |_____|_____|_____|_|___| https://github.com/nlohmann/json Licensed under the MIT License . SPDX-License-Identifier: MIT Copyright (c) 2013-2022 Niels Lohmann . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` ## dmon.h: ``` BSD 2-Clause License Copyright (c) 2019, Sepehr Taghdisian (septag@protonmail.com) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ``` ## ImGui ``` The MIT License (MIT) Copyright (c) 2014-2024 Omar Cornut Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` ## Inter-Regular.ttf ``` Copyright (c) 2016 The Inter Project Authors (https://github.com/rsms/inter) This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL ----------------------------------------------------------- SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007 ----------------------------------------------------------- PREAMBLE The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others. The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives. DEFINITIONS \"Font Software\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation. \"Reserved Font Name\" refers to any names specified as such after the copyright statement(s). \"Original Version\" refers to the collection of Font Software components as distributed by the Copyright Holder(s). \"Modified Version\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment. \"Author\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software. PERMISSION AND CONDITIONS Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions: 1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself. 2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user. 3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users. 4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission. 5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software. TERMINATION This license becomes null and void if any of the above conditions are not met. DISCLAIMER THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE. ``` ### tinyfiledialogs ``` SPDX-License-Identifier: Zlib Copyright (c) 2014 - 2024 Guillaume Vareille http://ysengrin.com ________________________________________________________________ | | 100% compatible C C++ -> You can rename this .c file as .cpp |________________________________________________________________| ********* TINY FILE DIALOGS OFFICIAL WEBSITE IS ON SOURCEFORGE ********* _________ / \\ tinyfiledialogs.c v3.18.2 [Jun 8, 2024] zlib licence |tiny file| Unique code file created [November 9, 2014] | dialogs | \\____ ___/ http://tinyfiledialogs.sourceforge.net \\| git clone http://git.code.sf.net/p/tinyfiledialogs/code tinyfd ____________________________________________ | | email: tinyfiledialogs at ysengrin.com |____________________________________________| _________________________________________________________________________________ | | the windows only wchar_t UTF-16 prototypes are at the bottom of the header file |_________________________________________________________________________________| _________________________________________________________ | | on windows: - since v3.6 char is UTF-8 by default | - if you want MBCS set tinyfd_winUtf8 to 0 | - functions like fopen expect MBCS |_________________________________________________________| If you like tinyfiledialogs, please upvote my stackoverflow answer https://stackoverflow.com/a/47651444 - License - This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. __________________________________________ | ______________________________________ | | | | DO NOT USE USER INPUT IN THE DIALOGS | |______________________________________| |__________________________________________| ``` ",
    "url": "/f3d/doc/THIRD_PARTY_LICENSES.html",
    
    "relUrl": "/doc/THIRD_PARTY_LICENSES.html"
  },"8": {
    "doc": "Architecture",
    "title": "Architecture",
    "content": "# F3D Architecture F3D is structured in different parts, interacting with each others and with F3D dependencies. This architecture is reflected by the directories organisation. - **application**: the code of the F3D application itself, see below - cmake: cmake macros and functions, used by the CMake build system - doc: this very documentation - examples: examples usage of the libf3d and plugin framework in python and C++ - external: dependencies that are included directly in the code - java: [java bindings](/f3d/doc/libf3d/LANGUAGE_BINDINGS.html#java-experimental) and associated tests. - **library**: the [libf3d](/f3d/doc/libf3d/README_LIBF3D.html) itself, see below - **plugins**: all the [plugins](/f3d/doc/libf3d/PLUGINS.html) providing different readers, see below - python: [python bindings](/f3d/doc/libf3d/LANGUAGE_BINDINGS.html#python) and tests - resources: all non code, non doc, like icon, configs and such - testing: all testing related resources, does not contain the test themselves - **vtkext**: extensions to VTK and related tests, see below - webassembly: [webassembly/javascript bindings](/f3d/doc/libf3d/LANGUAGE_BINDINGS.html#javascript-experimental) and [F3DWeb](https://f3d.app/web/) application code - winshellext: shell extension for Windows, provide [thumbnails for Windows](/f3d/doc/user/DESKTOP_INTEGRATION.html#windows) Here is diagram explaining how some of these parts interact together: ``` ┌────────────────┐ ┌───────────────┐ │ │ │ │ │ application │◄────uses─────│ winshellext │ │ │ │ │ └────────────────┘ └───────────────┘ │ │ ┌──────────┐ │ │ │ depends on ┌─wraps──│ python │ │ │ │ │ │ │ └──────────┘ │ ┌───────────┐ │ ┌──────────┐ └────────►│ │◄───┘ │ │ │ library │◄─────wraps──│ java │ ┌───loads──────│ │◄───┐ │ │ │ └───────────┘ │ └──────────┘ ▼ │ │ ┌──────────┐ ┌───────────┐ │ │ │ │ │ │ depends on └─wraps──│ wasm │ │ plugins │ │ │ │ │ │ ▼ └──────────┘ └───────────┘ ┌──────────────────┐ │ │ vtkext │ │ ├────────┬─────────┤ depends─on──►│ public │ private │ └────────┴─────────┘ ``` ## vtkext `vtkext` contains two [VTK modules](https://docs.vtk.org/en/latest/api/cmake/ModuleSystem.html) that are used extensively in the libf3d. The public one is used in the plugins. `public` is a VTK module that contains classes and utilities that can be installed as part of the `plugin_sdk` and used by plugins, including externals plugins. `vtkF3DImporter` is a class that is specifically made for plugin developers to inherit their importers from. The documentation of this module can be found [here](https://f3d.app/doc/libf3d/vtkext_doxygen/). `private` is a VTK module that contains many classes and utilities used by the libf3d to provide all features of F3D, especially the rendering, interactions and UI. A notable class is `vtkF3DRenderer` that is responsible to actually add the different actors in the 3D scene. Each of these modules also contains [tests](/f3d/doc/dev/TESTING.html#vtkextensions-layer) in the `Testing` directory. ## plugins `plugins` contains [libf3d plugins](/f3d/doc/libf3d/PLUGINS.html) that are provided by default in the F3D packages. Each of these plugins correspond to a specific dependency and are named accordingly. Each of these plugins provide access to specific readers for specific formats. Without plugins, F3D and the libf3d would not be able to open any file. These plugins can be loaded statically or dynamically, which makes the dependencies truly optional if needed. ## library `library` contains the code of the libf3d. It is a C++ library with a very limited API surface and larger, private, implementation. Most classes in the libf3d are split in two. A public part that contains mostly the public API, and a private part, suffixed \"\\_impl\", that implements that public API and also contains hidden methods used to communicate between classes, especially in regards to VTK symbols. Logically, it is structured in 3 parts, `public` which contains the public API header files and are all installed, `private` which contains the implementation classes headers files and `src` that contains the source files of all the classes, public and private. There is also a dedicated `testing` directory which contains the [unit and functional testing](/f3d/doc/dev/TESTING.html#library-layer) of the libf3d. It also contains the `options.json` file, which is the file used to generate all [options](/f3d/doc/libf3d/OPTIONS.html) code. ## application `application` contains the code of the F3D application itself. It relies of course on the libf3d to implement all the applicative logic. The most important class in the `F3DStarter` which contains most of the top logic on the application. `F3DOptionsTools` is also notable as it handles most of the command line options logic. There is also a dedicated `testing` directory which contains all of the [applicative testing](/f3d/doc/dev/TESTING.html#application-layer) of the F3D application as well as many functional testing of the libf3d. ## Other f3d-app repositories Although almost everything is contained in the [f3d-app/f3d](https://github.com/f3d-app/f3d) repository, other repositories in the [f3d-app](https://github.com/f3d-app) organisation are handling certains specific tasks in the F3D ecosystem. - The [f3d-superbuild](https://github.com/f3d-app/f3d-superbuild) handles the packaging and the creation of the binaries provided in the [releases page](https://github.com/f3d-app/f3d/releases). - [f3d-media](https://github.com/f3d-app/f3d-media) backups all images and video used in this documentation - A collection of actions: [sccache-setup](https://github.com/f3d-app/sccache-setup-action), [lfs-data-cache](https://github.com/f3d-app/lfs-data-cache-action) and [install-mesa-windows](https://github.com/f3d-app/install-mesa-windows-action) used by the CI of F3D - A collection of [docker files](https://github.com/f3d-app/f3d-docker-images) used for generating docker images used by the CI of F3D ",
    "url": "/f3d/doc/dev/ARCHITECTURE.html",
    
    "relUrl": "/doc/dev/ARCHITECTURE.html"
  },"9": {
    "doc": "Build",
    "title": "Build",
    "content": "# Build guide F3D uses a CMake based build system, so building F3D just requires installing needed dependencies, configuring and building. If you are not used to such processes please take a look at our [getting started guide](/f3d/doc/dev/GETTING_STARTED.html). ## Dependencies - [CMake](https://cmake.org) >= 3.1. - [VTK](https://vtk.org) >= 9.2.6 (9.4.1 recommended). - A C++17 compiler. - A CMake-compatible build system (Visual Studio, XCode, Ninja, Make, etc.). - Optionally, [Assimp](https://www.assimp.org/) >= 5.4.0. - Optionally, Open CASCADE [OCCT](https://dev.opencascade.org/) >= 7.6.3. - Optionally, [Alembic](http://www.alembic.io/) >= 1.8.5. - Optionally, [OpenUSD](https://openusd.org/release/index.html) >= 23.05. - Optionally, [OpenVDB](https://www.openvdb.org/download/) >= 12.0.0, enable `IOOpenVDB` module during VTK configuration. - Optionally, [Draco](https://google.github.io/draco/) >= 1.5.6. - Optionally, [Python](https://www.python.org/) >= 3.9 and [pybind11](https://github.com/pybind/pybind11) >= 2.9.2. - Optionally, [Java](https://www.java.com) >= 17. - Optionally, [OpenEXR](https://openexr.com/en/latest/) >= 3.0.1. F3D is tested continuously against versions recommended by the [VFX reference platform](https://vfxplatform.com) defined for **CY2025** ## VTK compatibility As stated in the dependencies, F3D is compatible with VTK >= 9.2.6, however, some features may not be available. We suggest using VTK 9.4.1 with RenderingRayTracing, IOExodus, IOHDF and IOOpenVDB modules enabled in order to get as many features as possible in F3D. ## Configuration and building Configure and generate the project with CMake, then build the software using your build system. Here is some CMake options of interest: - `F3D_BUILD_APPLICATION`: Build the F3D executable. - `BUILD_TESTING`: Enable the [tests](/f3d/doc/dev/TESTING.html). - `F3D_MACOS_BUNDLE`: On macOS, build a `.app` bundle. - `F3D_WINDOWS_BUILD_SHELL_THUMBNAILS_EXTENSION`: On Windows, build the shell thumbnails extension. - `F3D_WINDOWS_BUILD_CONSOLE_APPLICATION`: On Windows, build a supplemental Win32 console application. - `F3D_PLUGINS_STATIC_BUILD`: Build all plugins as static library (embedded into `libf3d`) and automatically loaded by the application. Incompatible with `F3D_MACOS_BUNDLE`. - `BUILD_SHARED_LIBS`: Build the libf3d and all plugins as static library (embedded into `f3d` executable). The `library` and `plugin_sdk` component will not be installed. Some modules, plugins and language bindings depending on external libraries can be optionally enabled with the following CMake variables: - `F3D_MODULE_RAYTRACING`: Support for raytracing rendering. Requires that VTK has been built with `OSPRay` and `VTK_MODULE_ENABLE_VTK_RenderingRayTracing` turned on. Disabled by default. - `F3D_MODULE_EXR`: Support for OpenEXR images. Requires `OpenEXR`. Disabled by default. - `F3D_MODULE_UI`: Support for ImGui widgets. Uses provided ImGui. Enabled by default. - `F3D_PLUGIN_BUILD_HDF`: Support for VTKHDF (.vtkhdf) and ExodusII (.ex2) file formats. Requires that VTK has been built with `IOHDF` and `IOExodus` modules (and `hdf5`). Enabled by default. - `F3D_PLUGIN_BUILD_OCCT`: Support for STEP, IGES, BREP, and XBF file formats. Requires `OpenCASCADE`. Disabled by default. - `F3D_PLUGIN_BUILD_ASSIMP`: Support for FBX, DAE, OFF, DXF, X and 3MF file formats. Requires `Assimp`. Disabled by default. - `F3D_PLUGIN_BUILD_ALEMBIC`: Support for ABC file format. Requires `Alembic`. Disabled by default. - `F3D_PLUGIN_BUILD_DRACO`: Support for DRC file format. Requires `Draco`. Disabled by default. - `F3D_PLUGIN_BUILD_USD`: Support for USD file format. Requires `OpenUSD`. Disabled by default. - `F3D_PLUGIN_BUILD_VDB`: Support for VDB file format. Requires that VTK has been built with `IOOpenVDB` module (and `OpenVDB`). Disabled by default. - `F3D_BINDINGS_PYTHON`: Generate python bindings (requires `Python` and `pybind11`). Disabled by default. - `F3D_BINDINGS_PYTHON_GENERATE_STUBS`: Generate python stubs (requires `Python` and `pybind11_stubgen`). Disabled by default. - `F3D_BINDINGS_JAVA`: Generate java bindings (requires `Java` and `JNI`). Disabled by default. Some dependencies are provided internally, eg: ImGui, dmon and others. Use `F3D_USE_EXTERNAL_*` to use an external version of these libraries. ## VCPKG It's possible to use VCPKG to automatically build dependencies. A manifest file `vcpkg.json` is available at your convenience. Please read [VCPKG documentation](https://vcpkg.io/en/getting-started.html). Basically, just install VCPKG, and configure F3D using `-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake` option. Only VTK is added to the manifest file and additional dependencies must be added manually in this file. ## Installing Installation can be done through CMake, by running the following command: ``` cmake --install ${your_build_dir} ``` Individual components can also be installed by specifying the component name: ``` cmake --install ${your_build_dir} --component ${component_name} ``` Here is the list of all the components: | Name | Installed by default | Operating system | Description | --------------- | -------------------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------- | `application` | YES | ALL | F3D application. | `configuration` | NO | ALL | Default configuration files, `config` and `thumbnail`. | `library` | YES | ALL | libf3d library binaries. | `plugin` | YES | ALL | libf3d plugins. | `dependencies` | NO | ALL | libf3d runtime dependencies. Can be used to create a self-contained and relocatable package. System libraries are excluded. | `sdk` | NO | ALL | libf3d SDK (headers and CMake config files) for `library` and `application` find_package components. | `plugin_sdk` | NO | ALL | libf3d plugin SDK (headers and CMake config files including macros) for `pluginsdk` find_package components. | `licenses` | YES | ALL | F3D and third party licenses. | `documentation` | YES | Linux | `man` documentation. | `shellext` | YES | Windows/Linux | Desktop integration. | `python` | YES | ALL | Python bindings. | `java` | YES | ALL | Java bindings. | `mimetypes` | NO | Linux | Plugins mimetype XML files for integration with Freedesktop. | `assets` | YES | Linux | Assets for integration with Freedesktop. | `colormaps` | NO | ALL | Color maps presets, see [documentation](/f3d/doc/user/COLOR_MAPS.html) | ",
    "url": "/f3d/doc/dev/BUILD.html",
    
    "relUrl": "/doc/dev/BUILD.html"
  },"10": {
    "doc": "Build (WebAssembly)",
    "title": "Build (WebAssembly)",
    "content": "# Introduction F3D can be built in WebAssembly using emscripten in order to embed it into a web browser. It is still experimental and only a small fraction of the libf3d public API is bound. An example can be seen at https://f3d.app/web This guide is describing how to build VTK and F3D with emscripten using Docker on Linux or Windows. # Building While it's possible to setup an emscripten cross-compiling toolchain locally, it's easier to use Docker and the provided npm scripts. ## Preparing the build Install `Docker` and `npm` locally. ## Building F3D Go to the `webassembly` folder and run the following command to build F3D: ```sh npm run build:deb # or build:rel for optimized build ``` On completion, a folder `webassembly/dist` is created containing the artifacts. # Testing it locally Five different files should be located in `webassembly/dist` folder: - `f3d.js`: javascript library - `f3d.wasm`: webassembly binaries - `f3d.data`: virtual filesystem containing the file specified in `F3D_WASM_DATA_FILE` - `index.html`: example file setting up the web page - `favicon.ico`: icon used to display the logo in the browser tab Again, use a npm command to test locally by running a HTTP server: ```sh npm run serve ``` Going to http://localhost:3000 should display the web page and load F3D web app. ",
    "url": "/f3d/doc/dev/BUILD_WASM.html",
    
    "relUrl": "/doc/dev/BUILD_WASM.html"
  },"11": {
    "doc": "Coding style",
    "title": "Coding style",
    "content": "# Coding Style F3D use different coding styles in each component, however there are some common rules ## C++ ### Common rules Overall syntax: - CamelCase. - Avoid using `using` for namespaces. - Initialize variables in header when possible. - Local variables starts with a lower case char. - Class members starts with a upper case char. - Indents are two spaces. - One space between instruction and parenthesis. - Always add curly brace after instruction. - Curly brace one a new line, aligned with instruction. - Add `//----------------------------------------------------------------------------` before any method in implementation. Example: ```cpp //---------------------------------------------------------------------------- void class::method() { if (condition) { std::vector myIntVector = { 13 }; } } ``` Includes: - Organized by category: `F3DApplication`, `libf3d`, `VTKExtensions`, `other deps`, `std`, `system`. - Sorted inside category. ### F3D Application rules - Class starts with `F3D` - Method starts with an uppercase char. ### libf3d rules - Class starts with a lower case char. - Method starts with an lower case char. ### VTKExtensions rules - Follow VTK rules - Method starts with an uppercase char. - Class starts with `vtkF3D` if inheriting from vtkObject. - Class starts with `F3D` if not inheriting from vtkObject. ### Automatic formatting Some of the rules above are enforced using clang-format thanks to a `.clang-format` file. The continuous integration checks it whenever code is pushed to a pull request. To fix it locally, you can use: - single file: `clang-format -i /path/to/file.ext` - all files: `shopt -s globstar; clang-format -i **/*.{h,cxx}` Please note there can be small discrepancy between the CI and local run of clang-format depending on the version in use. You may need to fix these manually. ## Python All python code is simply formatted using [Black style](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html). The continuous integration checks the formatting of python code using `black`. You can fix it locally by running: - single file: `black /path/to/file.py` - all files: `black --include '(\\.py|\\.py\\.in)' .` ## Markdown and others Markdown, JavaScript, JSON, HTML and YAML files are formatted using [Prettier](https://prettier.io/docs/). The continuous integration checks the formatting of all these files using `prettier`. You can fix them locally by running: - single file: `prettier -w /path/to/file.ext` - all files: `shopt -s dotglob;shopt -s globstar; prettier -w **/*.{js,json,md,html,yml}` ",
    "url": "/f3d/doc/dev/CODING_STYLE.html",
    
    "relUrl": "/doc/dev/CODING_STYLE.html"
  },"12": {
    "doc": "Generate",
    "title": "Generate",
    "content": "# How to generate the full coverage report Requires `gcovr` program and `gcc` toolchain. 1. Build with `F3D_COVERAGE` option enabled. 2. Run all tests, `xdotool` needs to be installed. This will generate many `.gcda` files. 3. Generate the report with: `gcovr -r /path/to/sources --html --html-details -o coverage.html`. # How to build and test with sanitizer Requires `clang` toolchain. 1. Build with `F3D_SANITIZER` option to any of the possible values. 2. `export LSAN_OPTIONS=suppressions=/path/to/f3d/.lsan.supp:use_tls=0`. 3. `export TSAN_OPTIONS=suppressions=/path/to/f3d/.tsan.supp`. 4. Run all tests. # How to locally generate the Jekyll based website 1. Install `ruby` and make sure ruby binaries directory is added to your `PATH` 2. Install Jekyll and all dependencies: `gem install jekyll jekyll-remote-theme jekyll-relative-links jekyll-seo-tag jekyll-optional-front-matter jekyll-titles-from-headings jekyll-include-cache` 3. Run Jekyll locally: `jekyll server` 4. Open http://127.0.0.1:4000/ in a browser Please note the favicon and search bar are not working locally, this is expected. # How to locally generate the doxygen documentation 1. Install Python, pip and doxygen 2. `pip install sphinx sphinx-book-theme exhale` 3. `sphinx-build -M html ./library/doxygen /path/to/build` 4. `/path/to/build` directory now contains a HTML website ",
    "url": "/f3d/doc/dev/GENERATE.html",
    
    "relUrl": "/doc/dev/GENERATE.html"
  },"13": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "# Getting started guide This is a getting started guide, aimed to people that are not used to C++ programming, configuring and compiling. If you are already used to such processes, you may be looking for our [build guide](/f3d/doc/dev/BUILD.html). This guide will help you to compile your own version of F3D with required dependencies. Optional dependencies or covered in the build guide. - If you are using [Linux](#linux) - If you are using [Windows](#windows) - If you are using [macOS](#macos) ## Linux Note: The following steps were tested with Ubuntu 23 and ArchLinux but should work for other OSes as stated, as long as listed packages are available. ### Install dependencies First make sure your system is up-to-date, then install the required dependencies using the terminal. #### Debian/Ubuntu/Mint ``` sudo apt update sudo apt upgrade sudo apt install build-essential git git-lfs cmake libvtk9-dev ``` Note: Ubuntu 24.04 / Debian 12 provides VTK version 9.1 but f3d requires VTK 9.2.6 at minimum, so building and installing vtk from source is suggested. Look at Windows build instruction for inspiration if needed. #### Fedora/Centos/RedHat ``` sudo yum update sudo yum install make automake gcc gcc-c++ kernel-devel git git-lfs cmake vtk ``` #### Arch Linux ``` sudo pacman -Syu sudo pacman -S base-devel git git-lfs cmake vtk nlohmann-json hdf5 netcdf fmt verdict openmpi glew ospray libxcursor ``` ### Compile F3D Open a terminal. ``` mkdir f3d cd f3d git clone https://github.com/f3d-app/f3d src mkdir build cd build cmake ../src make ``` You can then simply run F3D from the command line: ``` ./bin/f3d ``` ### Running the test suite (optional) ``` cmake -DBUILD_TESTING=ON ../src make ctest ``` ## Windows The following steps were tested with Visual Studio Community 2022 using Windows 10, but should also work for other versions. This guide is relying a lot on terminal command in order to provide easy steps to follow. Alternatively, it is possible to use Visual Studio directly by opening .sln files and building in Visual Studio. #### Install Dependencies - Download and install [git bash for windows][gitforwindows] - Download and install [cmake][cmake-download] - Download and install [Visual Studio 2022 Community Edition][visual-studio] #### Retrieve VTK and F3D sources - Open git bash ```sh cd C: mkdir dev cd dev mkdir vtk cd vtk git clone --depth 1 --branch v9.4.1 https://gitlab.kitware.com/vtk/vtk.git src mkdir build mkdir install cd .. mkdir f3d cd f3d git clone https://github.com/f3d-app/f3d.git src mkdir build ``` Note: Resulting folder architecture should look like this: ``` dev |-- f3d |-- build | `-- src `-- vtk |-- build |-- install `-- src ``` #### Build and install VTK in a dedicated folder - Open x64 Native Tools Command Prompt for VS 2022 ```sh cd C:\\dev\\vtk\\build cmake -DCMAKE_INSTALL_PREFIX=../install ../src cmake --build . -j 16 --config Debug cmake --install . --config Debug ``` Note: These commands will take a while. #### Add VTK libraries to the PATH - Search for \"Environment variables\" in Windows menu and open associated control panel - Click on \"Environment variables..\" button - Double click on \"Path\" - Click on \"New\" and write \"C:\\dev\\vtk\\install\\bin\" - Press Ok - Press Ok - Press Ok #### Build F3D - Open x64 Native Tools Command Prompt for VS 2022 ```sh cd C:\\dev\\f3d\\build cmake -DVTK_DIR=C:/dev/vtk/install/lib/cmake/vtk-9.4 ../src cmake --build . --config Debug ``` #### Run - Open a new file manager window - Double click on the `C:\\dev\\f3d\\build\\bin_Debug\\f3d.exe` executable ### Running the test suite (optional) - Open x64 Native Tools Command Prompt for VS 2022 ``` cd C:\\dev\\f3d\\build cmake -DBUILD_TESTING=ON . cmake --build . --config Debug ctest -C Debug ``` ## macOS Note: The following steps were tested with macOS Catalina using Xcode 12.4, but should also work for other versions ### Install Xcode There are different ways to install Xcode, you can use the AppStore or download it from apple developer website and then extract and install it. ### Install Homebrew Open a terminal. ``` /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" (echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> ~/.zprofile eval \"$(/opt/homebrew/bin/brew shellenv)\" ``` ### Install dependencies Open a terminal. ``` brew install git git-lfs cmake curl vtk git lfs install ``` Note: Homebrew is downloading, compiling and installing all vtk dependencies. This command may take a very long time. ### Compile F3D Open a terminal. ``` mkdir f3d cd f3d git clone https://github.com/f3d-app/f3d src mkdir build cd build cmake ../src make ``` You can then simply run F3D from the command line: ``` ./bin/f3d.app/Contents/MacOS/f3d ``` ### Running the test suite (optional) ``` cmake -DBUILD_TESTING=ON ../src make ctest ``` [cmake-download]: https://cmake.org/download [gitforwindows]: https://gitforwindows.org/ [visual-studio]: https://visualstudio.microsoft.com/vs/community/ ",
    "url": "/f3d/doc/dev/GETTING_STARTED.html",
    
    "relUrl": "/doc/dev/GETTING_STARTED.html"
  },"14": {
    "doc": "Governance",
    "title": "Governance",
    "content": "# Governance Policy This document provides the governance policy for F3D (the \"Project\"). [Every person](/f3d/doc/dev/MAINTAINERS_AND_CONTRIBUTORS.html) responsible for its maintenance (the \"Maintainers\") agrees to this policy and to abide by all Project policies, including the [code of conduct](/f3d/CODE_OF_CONDUCT.html) by adding their name to the [MAINTAINERS_AND_CONTRIBUTORS.md](/f3d/doc/dev/MAINTAINERS_AND_CONTRIBUTORS.html) file. ## 1. Roles This Project includes the following roles. ### 1.1. Maintainers Maintainers are responsible for organizing activities around developing, maintaining, and updating the Project. Maintainers are responsible of upholding the [Code of Conduct](/f3d/CODE_OF_CONDUCT.html). Maintainers are also responsible for determining consensus for technical or community matters. The Project may add or remove Maintainers by affirmative vote of 2/3 of all Maintainers. Maintainers are de-facto moderators. Maintainers are part of the f3d-app github organization with a \"owner\" role and listed in the [dedicated](/f3d/doc/dev/MAINTAINERS_AND_CONTRIBUTORS.html) file. Maintainers is an important role and as such, will be evaluated by the community yearly and exit interview may be conducted in case of a Maintainer leaving the role. Any Returning Contributor interested to become a Maintainer should just reach out to existing Maintainers for consideration. ### 1.1. Moderators Moderators are responsible of upholding the [Code of Conduct](/f3d/CODE_OF_CONDUCT.html). Moderators are responsible for determining consensus for community matters. The Project may add or remove Maintainers by affirmative vote of 2/3 of all Maintainers. Anyone interested to become a moderators should just reach out to existing Maintainers for consideration. ### 1.2. Returning Contributors Contributors are those who have made multiple contributions to the Project and want to be acknowledged as such. Returning Contributors are also very much welcome to share their ideas and feedbacks about the development and maintenance of F3D. Returning contributors may be asked by others about their contributions, provide reviews on code they are familiar with, provide technical insight during discussions and take part in any related activities they wish to. To become a Returning Contributor, one need to have merged at least two pull requests into the F3D repositories. Returning Contributors are part of the f3d-app github organization with a \"member\" role and are listed in the [dedicated](/f3d/doc/dev/MAINTAINERS_AND_CONTRIBUTORS.html) file. Usually Maintainers will reach out to potential Returning Contributors but in case it was missed, one should reach out to Maintainers for consideration. Maintainers may decide to list a returning contributor as inactive after a year without contributions, in that case they will be removed from the f3d-app github organization until active again. ### 1.3. Contributors Contributors are those who have made or want to make contributions to the Project. ### 1.4. Mentees Mentees are contributors that are enrolled in the mentoring program of F3D. It is open to anyone willing to learn more about open source contribution to F3D and be helped by Maintainers and Contributors on [discord](https://discord.f3d.app). ### 1.5. Sponsor Sponsor are users that are currently sponsoring the project. They are acknowledged as such in each release and on [discord](https://discord.f3d.app). Sponsoring can be done either one-time or monthly. One-time sponsor will only be considered sponsor until the next release. See the detail on our [sponsor page](https://github.com/sponsors/f3d-app). ### 1.6 Industry sponsor Industry sponsor are company that are currently sponsoring the project. They are acknowledged as such in each release and in the [README.md](/f3d/) of the project with an appropriate logo. Potential industry sponsor should reach out to maintainers. ## 2. Decisions ### 2.1 Consensus-Based Decision Making The Project makes decisions through the consensus of the Maintainers. While explicit agreement of all Maintainers is preferred, it is not required for consensus. Rather, the Maintainers will determine consensus based on their good faith consideration of several factors, including the dominant view of the Contributors and the nature of support and objections. The Maintainers will document evidence of consensus in accordance with these requirements using issues comments. ### 2.2. Appeal Process Decisions may be appealed by opening an issue and that appeal will be considered by the Maintainers in good faith, who will respond in writing within a reasonable time. ## 3. How We Work ### 3.1. Openness Participation is open to anyone who is directly and materially affected by the activity in question. There shall be no undue financial barriers to participation. ### 3.2. Balance The development process should balance the interests of Contributors and other stakeholders. Contributors from diverse interest categories shall be sought with the objective of achieving balance. ### 3.3. Coordination and Harmonization Good faith efforts shall be made to resolve potential conflicts or incompatibility between releases in the Project. ### 3.4. Consideration of Views and Objections Prompt consideration shall be given to the written views and objections of all Contributors. ### 3.5. Written procedures This governance document and other materials documenting the Project development process shall be available to any interested person. ## 4. No Confidentiality Information disclosed in connection with any Project activity, including but not limited to meetings, contributions, and submissions, is not confidential, regardless of any markings or statements to the contrary. ## 5. Amendments Amendments to this governance policy may be made by affirmative vote of 2/3 of all Maintainers. --- Modified from of MVG-0.1-beta GOVERNANCE.md. Licensed under the [CC-BY 4.0 License](https://creativecommons.org/licenses/by-sa/4.0/). ",
    "url": "/f3d/doc/dev/GOVERNANCE.html",
    
    "relUrl": "/doc/dev/GOVERNANCE.html"
  },"15": {
    "doc": "Maintainers and Contributors",
    "title": "Maintainers and Contributors",
    "content": "# Maintainers and Contributors This document lists the Maintainers and Returning Contributors of the Project. ## Maintainers Maintainers may add themselves once approved by the existing Maintainers as described in the [Governance document](/f3d/doc/dev/GOVERNANCE.html). By adding your name to this list you are agreeing to abide by and uphold the Project governance documents and to abide by all of the Organization's policies, including the [code of conduct](/f3d/CODE_OF_CONDUCT.html). | **Name/Alias** | **Handle** | ---------------- | ---------- | Mathieu Westphal | mwestphal | Michael Migliore | Meakk | ## Returning Contributors Returning Contributors should add themselves once [requirements](/f3d/doc/dev/GOVERNANCE.html#12-returning-contributors) have been checked be existing Maintainers. Maintainers may decide to list a returning contributor as inactive after a year without contributions. Contributors with a single contribution or that may not want to are not listed here but can be found in the git history. | **Name/Alias** | **Handle** | **Active** | ------------------------------- | -------------- | ---------- | jrushlow | 19jrushlow | Yes | ssmncrf | samoncrief | Yes | Evgenii Startcev (PhilHellmuth) | exbluesbreaker | Yes | Louis Gombert | lgt2x | Yes | Artem | 0xfedcafe | Yes | Nig3l | Ni-g-3l | Yes | --- Modified from MVG-0.1-beta MAINTAINERS.md. Licensed under the [CC-BY 4.0 License](https://creativecommons.org/licenses/by-sa/4.0/). ",
    "url": "/f3d/doc/dev/MAINTAINERS_AND_CONTRIBUTORS.html",
    
    "relUrl": "/doc/dev/MAINTAINERS_AND_CONTRIBUTORS.html"
  },"16": {
    "doc": "Developer Documentation",
    "title": "Developer Documentation",
    "content": "# Developer Documentation - [How to get started with building F3D.](/f3d/doc/dev/GETTING_STARTED.html) - [How to build F3D.](/f3d/doc/dev/BUILD.html) - [How to test F3D.](/f3d/doc/dev/TESTING.html) - [How to contribute to F3D.](/f3d/CONTRIBUTING.html) - [How to Generate coverage and sanitizer report.](/f3d/doc/dev/GENERATE.html) - [Overview of the architecture of F3D.](/f3d/doc/dev/ARCHITECTURE.html) - [Coding Style.](/f3d/doc/dev/CODING_STYLE.html) - [Roadmaps and release cycle.](/f3d/doc/dev/ROADMAPS_AND_RELEASES.html) - [Governance.](/f3d/doc/dev/GOVERNANCE.html) - [Maintainers and Contributors.](/f3d/doc/dev/MAINTAINERS_AND_CONTRIBUTORS.html) - [Code of conduct.](/f3d/CODE_OF_CONDUCT.html) - [How to build F3D for webassembly.](/f3d/doc/dev/BUILD_WASM.html) ",
    "url": "/f3d/doc/dev/README_DEV.html",
    
    "relUrl": "/doc/dev/README_DEV.html"
  },"17": {
    "doc": "Roadmaps and release cycle",
    "title": "Roadmaps and release cycle",
    "content": "# Roadmaps and release cycles F3D is a community driven project and we try to provide as much information as we can about the upcoming features and release expectations. Please keep in mind while we may try to fulfill what was planned, some features may not be available as planned and releases can be delayed. Roadmaps are available on their dedicated issue with their associated project board and milestone. The first draft of the roadmap of each release will be discussed publicly on [discord](https://discord.f3d.app), then they are bound to evolve over time while the development happens. If you want to get involved, please feel free to join the [discord](https://discord.f3d.app), comment on the issues and contribute to the issues that matters to you! ## 3.2.0 Out next minor release is planned for July 2025 - [Issue](https://github.com/f3d-app/f3d/issues/2157) - [Milestone](https://github.com/f3d-app/f3d/milestone/12) - [Board](https://github.com/orgs/f3d-app/projects/2) ## Release cycle F3D release cycle is one minor release every three months, in January, April, July and October. A minor release may be skipped before a major release. ",
    "url": "/f3d/doc/dev/ROADMAPS_AND_RELEASES.html",
    
    "relUrl": "/doc/dev/ROADMAPS_AND_RELEASES.html"
  },"18": {
    "doc": "Testing",
    "title": "Testing",
    "content": "# Testing F3D has an extensive suite of tests that can be run locally, either to validate your build or because you are contributing to F3D and want to add/modify a test. ## CMake Options There are a few CMake options to configure the F3D testing framework: - `BUILD_TESTING`: Enable the test framework, off by default. Requires [git LFS](https://git-lfs.com/) if repository is cloned. - `F3D_TESTING_ENABLE_RENDERING_TESTS`: An option to enable/disable test that require rendering capabilities, on by default. - `F3D_TESTING_ENABLE_LONG_TIMEOUT_TESTS`: Certain tests can take some time to run, off by default, requires rendering tests. - `F3D_TESTING_FORCE_RENDERING_BACKEND`: Configure the rendering backend to use. Can be `auto` (default), `glx`, `wgl`, `egl` or `osmesa`. - `F3D_TESTING_ENABLE_GLX_TESTS`: Enable tests requiring a X11 server running on Linux. - `F3D_TESTING_ENABLE_OSMESA_TESTS`: Enable tests requiring OSMesa dependency. - `F3D_TESTING_ENABLE_EGL_TESTS`: Enable tests requiring EGL dependency. - `F3D_TESTING_ENABLE_EXTERNAL_GLFW`: Enable libf3d tests requiring GLFW dependency. - `F3D_TESTING_ENABLE_EXTERNAL_QT`: Enable libf3d tests requiring QT dependency. ## Running the tests To run all tests, build and then run `ctest` from the build directory: ``` cmake --build . ctest ``` To run a specific test, use the `ctest -R ` option: ``` ctest -R PLY ``` ## Testing architecture There are multiple layers of tests to ensure that testing covers all aspects of the application. The layers of the application are - Application layer - Library layer - Bindings layer - VTK Extension layer When contributing to F3D, it is necessary that new code is covered by a test in at least one layer above. Additional tests can be created in other layers, depending on the change. ### Application layer All application tests are initiated via the `CTest` (https://cmake.org/cmake/help/book/mastering-cmake/chapter/Testing%20With%20CMake%20and%20CTest.html) testing framework. `CTest` runs `f3d` with the `--output` and `--reference arguments which renders an output image and compares it to a reference image. F3D compares the differences between the 2 images and compute a difference value and compare it to a threshold to check if a test passes or not. All aspects of the application test framework are handled in `application/testing/CMakeLists.txt`. Usually, adding a test is as simple as adding a line like this one: ``` f3d_test(NAME TestName DATA datafile.ext ARGS --args-to-test) ``` where - `NAME` should be the name of the test, which must be unique - `DATA` should be a file in `testing/data` directory, though adding a new file is possible - `ARGS` should be the F3D options to pass to the f3d executable, if any Once the new test has been added, configure and build F3D, then run the test (`-VV` for verbose output): ``` ctest -R TestName -VV ``` The test will run and fail but an image output will be generated in the build directory, namely `Testing/Temporary/TestName.png`. Visually check that the generated file looks as expected, then add it to the F3D sources in `testing/baselines`. Rerun the test, it should now pass. There is many other keywords in the `f3d_test` macro, here is a non exhaustive list: - `TONE_MAPPING`: Tests that uses tone mapping so they can be disabled with old VTK version - `LONG_TIMEOUT`: Tests that takes a long time to run, so they can be disabled on weaker CI machines - `INTERACTION`: Interaction test, see below - `INTERACTION_CONFIGURE`: A special kind of interaction tests that require configuring the interaction log using CMake, eg drag and drop tests. - `NO_BASELINE`: Test that have no baselines and do not perform a rendering comparison at the end, usually combined with `REGEXP` - `NO_RENDER`: Tests that do not require rendering capability at all, usually combined with `REGEXP` - `NO_OUTPUT`: Tests that do not have an automatic `--output`, may still use `BASELINE` or define `--output` manually - `WILL_FAIL`: Tests that should fail in order to pass - `NO_DATA_FORCE_RENDER`: Tests that do not open any data yet require a rendering tests at the end, rely on an environment variable - `UI`: Tests that show the ImGui UI, hence require it to be present in order to be enabled ### Recovering baselines from CI Occasionally you may need to recover a baseline from the CI. If this is required, create a PR and let the test run and fail on CI. Check the actions run summary on Github and download the appropriate `baseline` archive. Extract the archive and navigate to the `build/Testing/Temporary/TestName.png`. Visually check that the generated file looks as expected, then add it to the F3D sources in `testing/baselines`. ### Creating Interaction tests Sometimes you may contribute changes that affect how the end user interacts with F3D, example, toggling orthographic projection on/off or zooming in/out of the rendered image. These human interactions are simulated by interaction tests. F3D has the functionality to record human interactions such as mouse wheel scrolls, mouse movements as well as keypresses to a file. This functionality is enabled by running ``` f3d --interaction-test-record ./TestName.log ``` where - `TestName` should be the name of the test case. While recording the interaction, care should be taken to perform the minimum number of events to simulate the interaction. For example, if you want to simulate the number `5` being pressed, there should be no mouse events or other keypress events during the recording of the interaction. The interaction file is saved when `f3d` is exited. Another interaction to avoid the one that quit F3D as it will have unexpected behavior when being replayed. Instead, quit the F3D application by using your window manager or Ctrl+C in the terminal. You can verify that your interaction file is correct by playing back the interaction ``` f3d --interaction-test-play ./TestName.log ``` Interactions that are not needed for the test can be removed manually. After verifying that the interaction file works as expected, copy it to `./testing/recordings`. The name of the interaction file should be the same as the test name. The interaction test case can then be created by adding ``` f3d_test(NAME TestName DATA datafile.ext INTERACTION) ``` to `application/testing/CMakeLists.txt` where - `INTERACTION` signifies that this is an interaction test The steps to running the test are the same as above. ### Library layer When for some reason adding a test in the application layer is not possible, it is possible to add a C++ test in the library layer. These tests are simple C++ methods that should return `EXIT_SUCCESS` or `EXIT_FAILURE`. Library test cases are handled in `library/testing`. To add a test, create a new `TestSDKName.cxx` file containing a `int TestSDKName(int argc, char* argv[])` method, then implement your test in C++ using the [libf3d](../libf3d/README.md) API. Then add you new file to `src/library/testing/CMakeLists.txt`. It is supported to read file as input and perform image comparison against baselines as an output, see other tests as examples. ### Bindings layer The libf3d supports multiple bindings, including Python, Java and Javascript. When improving/modifying these bindings, it is necessary to also improve/modify the bindings tests accordingly. Please take a look into `/testing` for examples to follow. ### VTKExtensions layer When for some reason adding a test in the application or library layer is not possible, it is possible to add a C++ test in the VTKExtensions layer. These tests are simple C++ methods that should return `EXIT_SUCESS` or `EXIT_FAILURE`. Everything is handled in `library/VTKExtensions/ModuleName/Testing`. To add a test, first identify which VTKExtensions module you need to add a test into, then create a new `TestName.cxx` file containing a `int TestName(int argc, char* argv[])` method, then implement your test in C++ using VTK and F3D VTKExtensions modules. Then add you new file to `library/VTKExtensions/ModuleName/Testing/CMakeLists.txt`. It is supported to read file as input if needed, see other tests as examples. ",
    "url": "/f3d/doc/dev/TESTING.html",
    
    "relUrl": "/doc/dev/TESTING.html"
  },"19": {
    "doc": "Classes Introduction",
    "title": "Classes Introduction",
    "content": "# Classes Introduction This is only an introduction to libf3d classes. For the complete documentation, please consult the [libf3d doxygen documentation.](https://f3d.app/doc/libf3d/doxygen/). ## Engine class The engine class is the main class that needs to be instantiated. All other classes instance are provided by the engine using getters, `getScene`, `getWindow`, `getInteractor`, `getOptions`. The engine factory lets you choose between the different types of OpenGL rendering backend. The generic `create()` is recommended in most cases and will use the best context possible available on your system. However, it's possible to force the rendering backend in some specific use cases: - `createGLX()`: force usage of GLX backend, works on Linux only and requires a X11 server to run. - `createWGL()`: force usage of WGL native backend on Windows. - `createEGL()`: force usage of EGL backend, recommended when doing offscreen rendering with a GPU available. Requires EGL library available. No interactor provided. - `createOSMesa()`: force usage of OSMesa backend (software rendering), recommended when doing offscreen rendering without any GPU. Requires OSMesa library available. No interactor provided. - `createNone()`: do not use any rendering. Useful to retrieve metadata only. - `createExternal()`: the user is responsible of the rendering stack. It lets the user integrate libf3d in other frameworks like Qt or GLFW. No interactor provided. See [Context](#context-class) documentation for more info. An additional boolean argument is available to specify if offscreen rendering is requested when relevant on the selected rendering backend. A static function `loadPlugin` can also be called to load reader plugins. It must be called before loading any file. An internal plugin containing VTK native readers can be loaded by calling `f3d::engine::loadPlugin(\"native\");`. Other plugins maintained by F3D team are available if their build is enabled: `alembic`, `assimp`, `draco`, `hdf`, `occt` and `usd`. If CMake option `F3D_PLUGINS_STATIC_BUILD` is enabled, the plugins listed above are also static just like `native` plugin. All static plugins can be loaded using `f3d::engine::autoloadPlugins()`. ## Scene class The scene class is responsible to `add` file from the disk into the scene. It supports reading multiple files at the same time and even mesh from memory. It is possible to `clear` the scene and to check if the scene `supports` a file. ## Context class Convenience class providing generic context API when using a external rendering backend (using `f3d::engine::createExternal()` factory). ## Window class The window class is responsible for rendering the data. Window lets you `render`, `renderToImage` and control other parameters of the window, like icon or windowName. ## Interactor class When provided by the engine, the interactor class lets you choose how to interact with the data. It contains the animation API to start and stop animation. Interactor lets you add, remove and trigger your [commands](/f3d/doc/user/COMMANDS.html). The commands let you interact with the libf3d in a very flexible manner. Interactor also lets you add and remove bindings in order to modify how the libf3d react to different interactions, eg. when a key is pressed or when a file is dropped. The libf3d has [default bindings](/f3d/doc/user/INTERACTIONS.html) but this API lets you defined your own by specifying [binds](/f3d/doc/user/CONFIGURATION_FILE.html#Bind) and commands. This API also lets you control the content of the cheatsheet. Use `log::setVerboseLevel(log::VerboseLevel::DEBUG)` to print debug information on interaction and command use. Of course, you can use `start` and `stop` to control the interactor behavior. `start` lets you specify time for the event loop and a `std::function` to execute at each loop. ## Camera class Provided by the window, this class lets you control the camera. You can either specify the camera position, target, and up direction directly, or specify movements relative to the current camera state. ## Image class A generic image class that can either be created from a window, from an image filepath or even from a data buffer. It supports comparison making it very practical in testing context. ## Log class A class to control logging in the libf3d. Simple using the different dedicated methods (`print`, `debug`, `info`, `warn`, `error`) and `setVerboseLevel`, you can easily control what to display. Please note that, on windows, a dedicated output window may be created. ## Options class This class lets you control the behavior of the libf3d. An option is basically a value that can be a optional or not. There is different API to access it, see the exhaustive [doc](/f3d/doc/libf3d/OPTIONS.html). ## Reader class This class is used internally by the [plugin SDK](/f3d/doc/libf3d/PLUGINS.html) and is not intended to be used directly. ## Plugin class This class is used internally by the [plugin SDK](/f3d/doc/libf3d/PLUGINS.html) and is not intended to be used directly. ",
    "url": "/f3d/doc/libf3d/CLASSES.html",
    
    "relUrl": "/doc/libf3d/CLASSES.html"
  },"20": {
    "doc": "Language Bindings",
    "title": "Language Bindings",
    "content": "# Language Bindings ## Python If the python bindings have been generated using the `F3D_BINDINGS_PYTHON` CMake option, the libf3d can be used directly from python. Make sure to set `PYTHONPATH` to path where the python module is built. Here is an example showing how to use libf3d python bindings: ```python import f3d eng = f3d.Engine.create(False) eng.options.update({ \"model.scivis.array-name\": \"Normals\", \"model.scivis.component\": 0, \"ui.bar\": True, \"render.grid.enable\": True, }) eng.scene.add(\"f3d/testing/data/dragon.vtu\") eng.interactor.start() ``` You can see more examples using python bindings in the dedicated example folder [here](https://github.com/f3d-app/f3d/tree/master/examples/libf3d/python). ### Stubs It's also possible to generate Python stubs automatically by enabling the CMake option `F3D_BINDINGS_PYTHON_GENERATE_STUBS`. Python stubs are `.pyi` files defining the public interface, allowing IDEs to auto-complete and do static analysis. ## Java (experimental) If the Java bindings have been generated using the `F3D_BINDINGS_JAVA` CMake option, the libf3d can be used directly from Java. You can import the `f3d.jar` package and use the provided Java classes directly. Make sure to set `java.library.path` to the path where the JNI library is built. Here is an example showing how to use libf3d Java bindings: ```java import app.f3d.F3D.*; public class F3DExample { public static void main(String[] args) { Engine.autoloadPlugins(); // Always use try-with-resources idiom to ensure the native engine is released try (Engine engine = new Engine(Window.Type.NATIVE)) { Scene scene = engine.getScene(); scene.add(\"f3d/testing/data/dragon.vtu\"); engine.getWindow().render(); } } } ``` ## Javascript (experimental) If the Javascript bindings have been generated by building F3D with webassembly and emscriptem, the libf3d can be used directly from a browser. See the dedicated [build](/f3d/doc/dev/BUILD_WASM.html) guide, this [example app](https://github.com/f3d-app/f3d/blob/master/webassembly/example.html) which you can test live [here](https://f3d.app/web/)! ",
    "url": "/f3d/doc/libf3d/LANGUAGE_BINDINGS.html",
    
    "relUrl": "/doc/libf3d/LANGUAGE_BINDINGS.html"
  },"21": {
    "doc": "Options",
    "title": "Options",
    "content": "# Options exhaustive list An option is a specific value stored in different struct in an `options` instance. They can be accessed directly through the structs, through a string API or through a std::variant API. The possible option are listed below and are organized by categories and subcategories, here is a non-exhaustive explanation of the categories. - `scene` options are related to how the scene is being displayed - `render` options are related to the way the render is done - `render.effect` options are related to specific techniques used that modify the render - `ui` options are related to the screenspace UI element displayed - `model` options are related to modifications on the model - `interactor` options requires an interactor to be present to have any effect Please note certain options are taken into account when rendering, others when loading a file. See the exhaustive list below, but note that this may change in the future. Please note certain options are `optional` by default, which means they are not set initially, See the [APIs](#APIs) details below for more info. ## Scene Options | Option | TypeDefaultTrigger | Description | F3D option | :--------------------------: | :------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------: | scene.animation.autoplay | boolfalseload | Automatically start animation. | \\-\\-animation-autoplay | scene.animation.index | int0load | Select the animation to load.Any negative value means all animations (glTF only).The default scene always has at most one animation. | \\-\\-animation-index | scene.animation.speed_factor | ratio1render | Set the animation speed factor to slow, speed up or even invert animation. | \\-\\-animation-speed-factor | scene.animation.time | doubleoptionalload | Set the animation time to load. | \\-\\-animation-time | scene.camera.index | intoptionalload | Select the scene camera to use when available in the file.The default scene always uses automatic camera. | \\-\\-camera-index | scene.up_direction | direction+Yload | Define the Up direction. It impacts the grid, the axis, the HDRI and the camera. | \\-\\-up | scene.camera.orthographic | booloptionalload | Set to true to force orthographic projection. Model specified by default, which is false if not specified. | \\-\\-camera\\-orthographic | ## Interactor Options | Option | TypeDefaultTrigger | Description | F3D option | :--------------------: | :------------------------: | :---------------------------- | :-------------: | interactor.trackball | boolfalserender | Enable trackball interaction. | \\-\\-trackball | interactor.invert_zoom | boolfalserender | Invert the zoom direction. | \\-\\-invert-zoom | ## Model Options | Option | TypeDefaultTrigger | Description | F3D option | :------------------------: | :------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------: | model.matcap.texture | pathoptionalrender | Path to a texture file containing a material capture. All other model options for surfaces are ignored if this is set. Model specified by default. | \\-\\-texture-matcap | model.color.opacity | doubleoptionalrender | Set _opacity_ on the geometry. Usually used with Depth Peeling option. Multiplied with the `model.color.texture` when present. Model specified by default. | \\-\\-opacity | model.color.rgb | coloroptionalrender | Set a _color_ on the geometry. Multiplied with the `model.color.texture` when present. Model specified by default. | \\-\\-color | model.color.texture | pathoptionalrender | Path to a texture file that sets the color of the object. Will be multiplied with rgb and opacity. Model specified by default. | \\-\\-texture-base-color | model.emissive.factor | coloroptionalrender | Multiply the emissive color when an emissive texture is present. Model specified by default. | \\-\\-emissive-factor | model.emissive.texture | pathrender | Path to a texture file that sets the emitted light of the object. Multiplied with the `model.emissive.factor`. Model specified by default. | \\-\\-texture-emissive | model.material.metallic | doubleoptionalrender | Set the _metallic coefficient_ on the geometry (0.0-1.0). Multiplied with the `model.material.texture` when present. Model specified by default. | \\-\\-metallic | model.material.roughness | doubleoptionalrender | Set the _roughness coefficient_ on the geometry (0.0-1.0). Multiplied with the `model.material.texture` when present. Model specified by default. | \\-\\-roughness | model.material.base_ior | doubleoptionalrender | Set the _index of refraction of the base layer_ (1.0-2.5). Model specified by default. | \\-\\-base\\-ior | model.material.texture | pathoptionalrender | Path to a texture file that sets the Occlusion, Roughness and Metallic values of the object. Multiplied with the `model.material.roughness` and `model.material.metallic`, set both of them to 1.0 to get a true result. Model specified by default. | \\-\\-texture-material | model.normal.scale | doubleoptionalrender | Normal scale affects the strength of the normal deviation from the normal texture. Model specified by default. | \\-\\-normal-scale | model.normal.texture | pathoptionalrender | Path to a texture file that sets the normal map of the object. Model specified by default. | \\-\\-texture-normal | model.scivis.enable | boolfalserender | _Color by an array_ present in on the data. If `model.scivis.array_name` is not set, the first available array will be used. | \\-\\-scalar-coloring | model.scivis.cells | boolfalserender | Color the data with value found _on the cells_ instead of points | \\-\\-cells | model.scivis.colormap | colormap\\render | Set a _custom colormap for the coloring_.See [colormap parsing](PARSING.md#colormap) for details. | \\-\\-colormap | model.scivis.component | int-1render | Specify the component to color with. -1 means _magnitude_. -2 means _direct values_. | \\-\\-comp | model.scivis.array_name | stringrender | Select the name of the array to color with. | \\-\\-coloring-array | model.scivis.range | vector\\optionalrender | Set the _coloring range_. Automatically computed by default. | \\-\\-range | model.point_sprites.enable | boolfalserender | Show sphere _points sprites_ instead of the geometry. | \\-\\-point-sprites | model.point_sprites.type | stringsphererender | Set the sprites type when showing point sprites (can be `sphere` or `gaussian`). | \\-\\-point-stripes-type | model.point_sprites.size | double10.0render | Set the _size_ of point sprites. | \\-\\-point-stripes-size | model.volume.enable | boolfalserender | Enable _volume rendering_. It is only available for 3D image data (vti, dcm, nrrd, mhd files) and will display nothing with other formats. It forces coloring. | \\-\\-volume | model.volume.inverse | boolfalserender | Inverse the linear opacity function. | \\-\\-inverse | ## Render Options | Option | TypeDefaultTrigger | Description | F3D option | :--------------------------------: | :----------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :------------------------------------------------------------------: | render.effect.translucency_support | boolfalserender | Enable _translucency support_. This is a technique used to correctly render translucent objects, implemented using depth peeling | \\-\\-translucency-support | render.effect.antialiasing.enable | stringfalserender | Enable _anti-aliasing_. This technique is used to reduce aliasing. | \\-\\-anti-aliasing | render.effect.antialiasing.mode | stringfxaarender | Set the anti-aliasing technique. Valid options are: FXAA (fast), SSAA (quality) | \\-\\-anti-aliasing-mode | render.effect.ambient_occlusion | boolfalserender | Enable _ambient occlusion_. This is a technique providing approximate shadows, used to improve the depth perception of the object. Implemented using SSAO | \\-\\-ambient_occlusion | render.effect.tone_mapping | boolfalserender | Enable generic filmic _Tone Mapping Pass_. This technique is used to map colors properly to the monitor colors. | \\-\\-tone-mapping | render.effect.final_shader | stringoptionalrender | Add a final shader to the output image | \\-\\-final-shader. See [user documentation](/f3d/doc/user/FINAL_SHADER.html). | render.line_width | doubleoptionalrender | Set the _width_ of lines when showing edges. Model specified by default. | \\-\\-line-width | render.show_edges | booloptionalrender | Set to true to show the _cell edges_. Model specified by default. | \\-\\-edges | render.point_size | doubleoptionalrender | Set the _size_ of points when showing vertices. Model specified by default. | \\-\\-point-size | render.backface_type | stringoptionalrender | Set the Backface type, can be `visible` or `hidden`, model specified by default. | \\-\\-backface-type | render.grid.enable | boolfalserender | Show _a grid_ aligned with the horizontal (orthogonal to the Up direction) plane. | \\-\\-grid | render.grid.absolute | boolfalserender | Position the grid at the _absolute origin_ of the model's coordinate system instead of below the model. | \\-\\-grid | render.grid.unit | doubleoptionalrender | Set the size of the _unit square_ for the grid. Automatically computed by default. | \\-\\-grid-unit | render.grid.subdivisions | int10render | Set the number of subdivisions for the grid. | \\-\\-grid-subdivisions | render.grid.color | color0, 0, 0render | Set the color of grid lines. | \\-\\-grid-color | render.raytracing.enable | boolfalserender | Enable _raytracing_. Requires the raytracing module to be enabled. | \\-\\-raytracing | render.raytracing.samples | int5render | The number of _samples per pixel_. | \\-\\-samples | render.raytracing.denoise | boolfalserender | _Denoise_ the raytracing rendering. | \\-\\-denoise | render.hdri.file | pathoptionalrender | Set the _HDRI_ image that can be used for ambient lighting and skybox.Valid file format are hdr, exr, png, jpg, pnm, tiff, bmp.If not set, a default is provided. | \\-\\-hdri-file | render.hdri.ambient | boolfalserender | Light the scene using the _HDRI_ image as ambient lightingThe environment act as a light source and is reflected on the material. | \\-\\-hdri-ambient | render.background.color | color0.2,0.2,0.2render | Set the window _background color_.Ignored if a _hdri_ skybox is used. | \\-\\-background-color | render.background.skybox | boolfalserender | Show the _HDRI_ image as a skyboxOverrides the the background color if any | \\-\\-hdri-skybox | render.background.blur.enable | boolfalserender | Blur background, useful with a skybox. | \\-\\-blur-background | render.background.blur.coc | double20.0render | Blur background circle of confusion radius. | \\-\\-blur-coc | render.light.intensity | double1.0render | Adjust the intensity of every light in the scene. | \\-\\-light-intensity | render.armature.enable | boolfalserender | Display armatures if present in the scene (glTF only). | \\-\\-armature | ## UI Options | Option | TypeDefaultTrigger | Description | F3D option | :-------------------: | :------------------------: | :--------------------------------------------------------------------------------------------------------------- | :--------------------: | ui.axis | boolfalserender | Show _axes_ as a trihedron in the scene. Requires an interactor. | \\-\\-axis | ui.scalar_bar | boolfalserender | Show _scalar bar_ of the coloring by data array. | \\-\\-bar | ui.cheatsheet | boolfalserender | Show a interaction cheatsheet | - | ui.console | boolfalserender | Show the console | - | ui.minimal_console | boolfalserender | Show the minimal console. Useful to execute a quick command and exit. | - | ui.filename | boolfalserender | Display the _filename info content_ on top of the window. | \\-\\-filename | ui.filename_info | string-render | Content of _filename info_ to display. | - | ui.font_file | pathoptionalrender | Use the provided FreeType compatible font file to display text.Can be useful to display non-ASCII filenames. | \\-\\-font-file | ui.scale | ratio1.0render | Scale fonts. | \\-\\-font-scale | ui.fps | boolfalserender | Display a _frame per second counter_. | \\-\\-fps | ui.loader_progress | boolfalseload | Show a _progress bar_ when loading the file. | \\-\\-progress | ui.animation_progress | boolfalseload | Show a _progress bar_ when playing the animation. | \\-\\-animation-progress | ui.metadata | boolfalserender | Display the _metadata_. | \\-\\-metadata | ui.dropzone | boolfalserender | Show a drop zone. Rendering is disabled when the viewport is smaller than 10×10 pixels. | - | ui.dropzone_info | string-render | Content of the drop zone text to display. | - | # APIs There are three APIs to access the options ## Struct API The most straightforward and easy to use API, just access it through the structs available in the options instance, eg: ```cpp f3d::engine eng = f3d::engine::create(); f3d::options& opt = eng.getOptions(); opt.render.show_edges = true; opt.render.grid.enable = true; opt.ui.metadata = true; opt.model.material.roughness = 0.6; ``` Please note that when accessing optional options, special care must be used, eg: ```cpp f3d::engine eng = f3d::engine::create(); f3d::options& opt = eng.getOptions(); if (opt.render.line_width.has_value()) { std::cout << \"Line Width: \" << opt.render.line_width.value() << std::endl; } else { std::cout << \"Line Width: unset\" << std::endl; } ``` It's even more true with the few optional boolean options as std::optional has an implicit boolean cast operator. ## String API The most generic and flexible API, as it rely on parsing and string generation. See the [parsing documentation](/f3d/doc/user/PARSING.html) for more details. ```cpp f3d::engine eng = f3d::engine::create(); f3d::options& opt = eng.getOptions(); opt.setAsString(\"render.show_edges\", \"true\"); opt.setAsString(\"render.grid.enable\", \"true\"); opt.setAsString(\"ui.metadata\", \"true\"); opt.setAsString(\"model.material.roughness\", \"0.6\"); ``` When using this API make sure to catch exceptions has needed, eg: ```cpp f3d::engine eng = f3d::engine::create(); f3d::options& opt = eng.getOptions(); try { std::cout << userProvidedName << \": \" << opt.getAsString(userProvidedName) << std::endl; } catch (const f3d::options::inexistent_exception&) { std::cout << userProvidedName << \" does not exist.\" << std::endl; } catch (const f3d::options::no_value_exception&) { std::cout << userProvidedName << \" is not set.\" << std::endl; } ``` ## Variant API An API that is similar to the F3D 2.0 options API thanks to std::variant. ```cpp f3d::engine eng = f3d::engine::create(); f3d::options& opt = eng.getOptions(); opt.set(\"render.show_edges\", true); opt.set(\"render.grid.enable\", true); opt.set(\"ui.metadata\", true); opt.set(\"model.material.roughness\", 0.6); ``` When using this API make sure to catch exception shown above with the string API. ",
    "url": "/f3d/doc/libf3d/OPTIONS.html",
    
    "relUrl": "/doc/libf3d/OPTIONS.html"
  },"22": {
    "doc": "Overview",
    "title": "Overview",
    "content": "# libf3d - A library to render 3D meshes By Michael Migliore and Mathieu Westphal. libf3d is a BSD-licensed C++17 library to open and render 3D meshes. It is of course used by F3D. libf3d API is simple and easy to learn. Python bindings are provided through pybind11. Java bindings are also available. libf3d API is still in alpha version and may change drastically in the future. ## Getting Started Rendering a file and starting the interaction is very easy: ```cpp #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine f3d::engine eng = f3d::engine::create(); // Add a file into a scene eng.getScene().add(\"path/to/file.ext\"); // Start rendering and interacting eng.getInteractor().start(); ``` As well as loading multiple files: ```cpp #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine f3d::engine eng = f3d::engine::create(); // Load multiples geometries eng.getScene().add({\"path/to/file.ext\", \"path/to/file2.ext\"}); // Start rendering and interacting eng.getInteractor().start(); ``` It's also possible to load a geometry from memory buffers: ```cpp #include #include #include // Create a f3d::engine f3d::engine eng = f3d::engine::create(); // Create a single triangle f3d::mesh_t mesh = {}; mesh.points = { 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, 1.f, 0.f, 0.f }; mesh.face_sides = { 3 }; mesh.face_indices = { 0, 1, 2 }; eng.getScene().add(mesh); // Start rendering and interacting eng.getInteractor().start(); ``` Manipulating the window directly can be done this way: ```cpp #include #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine with a offscreen window f3d::engine eng = f3d::engine::create(true); // Load a geometry eng.getScene().add(\"path/to/file.ext\"); // Set the window size and render to an image f3d::image img = eng.getWindow().setSize(300, 300).renderToImage(); // Save the image to a file img.save(\"/path/to/img.png\"); ``` Changing some options can be done this way: ```cpp #include #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine f3d::engine eng = f3d::engine::create(); // Recover the options and set the wanted value f3d::options& opt = eng.getOptions(); opt.render.effect.ambient_occlusion = true; opt.render.effect.antialiasing.enable = true; // Standard libf3d usage eng.getScene().add(\"path/to/file.ext\"); eng.getInteractor().start(); ``` Most options are dynamic, some are only taken into account when loading a file. See the [options](/f3d/doc/libf3d/OPTIONS.html) documentation. Find more examples in the [examples directory](https://github.com/f3d-app/f3d/tree/master/examples), you can also find other usages in the [testing directory](https://github.com/f3d-app/f3d/tree/master/library/testing). For the complete documentation, please consult the [libf3d doxygen documentation.](https://f3d.app/doc/libf3d/doxygen/). ## Building against the libf3d Please follow instructions in the [F3D build guide](/f3d/doc/dev/BUILD.html), make sure to build with `BUILD_SHARED_LIBS=ON` and to install the `sdk` component then use CMake to find the libf3d and link against it like this in your CMakeLists.txt: ```cmake find_package(f3d REQUIRED COMPONENTS library) [...] target_link_libraries(target f3d::libf3d) ``` ## find_package COMPONENTS When using `find_package(f3d)` and `sdk` CMake component have been installed, you can require specific components: - `application`: access to f3d::f3d target - `library`: access to f3d::libf3d target and include dir - `plugin_sdk`: access to CMake macros to create plugins, the f3d::vtkext target and include dir see the installed `f3dConfig.cmake` file for more info. ## Extending libf3d with plugins In order to add new supported file format to libf3d, you can create a plugin using CMake macros. Please follow instructions in the [F3D plugin SDK guide](/f3d/doc/libf3d/PLUGINS.html). Also make sure the `plugin_sdk` component have been installed as well as the `sdk` component. ",
    "url": "/f3d/doc/libf3d/OVERVIEW.html",
    
    "relUrl": "/doc/libf3d/OVERVIEW.html"
  },"23": {
    "doc": "Plugin SDK",
    "title": "Plugin SDK",
    "content": "# Plugin SDK Please follow instructions in the [F3D build guide](/f3d/doc/dev/BUILD.html), make sure to build with `BUILD_SHARED_LIBS=ON` and to install the `plugin_sdk` component. You will then be able to call `find_package(f3d REQUIRED COMPONENTS pluginsdk)` in your plugin CMakeLists.txt, a few macros are made available to you to generate a plugin which allow you to extend libf3d to support your own file format. Access to a f3d::vtkext VTK module is also provided if needed. > Please consider [contributing](/f3d/CONTRIBUTING.html) your plugin in [F3D directly](https://github.com/f3d-app/f3d/tree/master/plugins) if you think it can be useful to the community. > You can also consider contributing directly [in VTK](https://gitlab.kitware.com/vtk/vtk/blob/master/Documentation/dev/git/develop.md). ## Creating a plugin You can take a look at the example in the [examples/plugin](https://github.com/f3d-app/f3d/tree/master/examples/plugins) directory or at the official [plugins](https://github.com/f3d-app/f3d/tree/master/plugins). The first thing (and most difficult part) you have to do is creating a VTK reader (or a VTK importer if you want to support a full scene with materials, lights and cameras), and wrap it into a VTK module. You can create several readers/importers in the same VTK module if you need to support several file formats in a single plugin. Then, declare the reader(s) and the plugin using the CMake macros: ```cmake f3d_plugin_init() f3d_plugin_declare_reader( NAME \"ReaderName\" EXTENSIONS \"myext\" # set the extensions the reader can support MIMETYPES \"application/vnd.myext\" # set the mimetypes the reader can support VTK_READER ${vtk_classname} # set the name of the VTK reader class you have created FORMAT_DESCRIPTION \"description\" # set the proper name of the file format EXCLUDE_FROM_THUMBNAILER # add this flag if you don't want thumbnail generation for this reader OPTIONS \"option1\" \"option2\" # use this to define reader specific option that can be defined by the user ) f3d_plugin_declare_reader( NAME \"ReaderNameWithScene\" EXTENSIONS \"myext2\" # set the extensions the reader can support MIMETYPES \"application/vnd.myext2\" # set the mimetypes the reader can support VTK_IMPORTER ${vtk_classname} # set the name of the VTK importer class you have created FORMAT_DESCRIPTION \"description\" # set the proper name of the file format CUSTOM_CODE \"file.inl\" # set this to add a custom code when instancing your class, this is where reader options should be processed ) # More f3d_plugin_declare_reader calls are possible f3d_plugin_build( NAME \"PluginName\" VERSION 1.0 DESCRIPTION \"Plugin description\" VTK_MODULES CommonCore CommonExecutionModel # Add more VTK modules if necessary ) ``` If the build succeeds, a library called `libf3d-plugin-.so` will be created (`f3d-plugin-.dll` on Windows) A JSON file of the following form will also be generated. It's used by F3D internally to get information about supported file formats. ```json { \"description\": \"Plugin description\", \"name\": \"PluginName\", \"readers\": [ { \"description\": \"Reader description\", \"extensions\": [\"myext\"], \"mimetypes\": [\"application/vnd.myext\"], \"name\": \"ReaderName\" } ], \"type\": \"MODULE\", \"version\": \"1.0\" } ``` The list of existing mimetypes can be find [here](https://www.iana.org/assignments/media-types/media-types.xhtml). If your file format is not listed, the mimetype should be `application/vnd.${extension}` ## Loading your plugin The plugin can be loaded using `f3d::engine::loadPlugin(\"path or name\")` API if you are using libf3d, or `--load-plugins=\"path or name\"` option if you are using F3D application. The option can also be set in a configuration file that you could distribute with your plugin. ## f3d::vtkext F3D provides access to a VTK modules containing utilities that may be useful for plugin developers: - `vtkF3DFaceVaryingPointDispatcher`: A VTK filter that manipulates point data so that F3D can display them as face-varying data (used by `usd` plugin) - `vtkF3DBitonicSort`: A VTK class that perform Bitonic Sort algorithm on the GPU (used by the `splat` point sprites rendering algorithm - `vtkF3DImporter`: An Importer class that abstract away support for different version of VTK after some API changes. - `vtkF3DGLTFImporter`: An custom glTF importer class that support armatures, useful when creating other plugin supporting glTF extensions. For the complete documentation, please consult the [vtkext doxygen documentation.](https://f3d.app/doc/libf3d/vtkext_doxygen/). ",
    "url": "/f3d/doc/libf3d/PLUGINS.html",
    
    "relUrl": "/doc/libf3d/PLUGINS.html"
  },"24": {
    "doc": "libf3d Documentation",
    "title": "libf3d Documentation",
    "content": "# libf3d Documentation - [Overview of the libf3d.](/f3d/doc/libf3d/OVERVIEW.html) - [libf3d classes introduction.](/f3d/doc/libf3d/CLASSES.html) - [Exhaustive list of libf3d options.](/f3d/doc/libf3d/OPTIONS.html) - [How to use libf3d language bindings.](/f3d/doc/libf3d/LANGUAGE_BINDINGS.html) - [How to create a plugin.](/f3d/doc/libf3d/PLUGINS.html) ",
    "url": "/f3d/doc/libf3d/README_LIBF3D.html",
    
    "relUrl": "/doc/libf3d/README_LIBF3D.html"
  },"25": {
    "doc": "Animations",
    "title": "Animations",
    "content": "# Animations F3D is able to play animations for any files which contain them. Play them either interactively or by selecting a specific time to display. For files containing multiple animations, F3D allows the user to either play each animation separately or play all animations at the same time. ## Demonstration This specific example uses an animation file which can be downloaded [here](https://github.com/f3d-app/f3d/blob/606089959c9520085a9cbf70660fb0ffc68fb934/testing/data/InterpolationTest.glb). Load the example animation file shown above by executing within command line: `f3d InterpolationTest.glb` To view current animation name, press H to open up cheatsheet menu Press W to cycle through available animations Press space to play/pause current animation. Note: A red bar runs along the bottom of screen to indicate the current time interval of the animation sequence. \"All Animations\" will play all animations at the same time. ## Command line options F3D animation behavior can be fully controlled from the command line using the following options. | Options | Default | Description | ---------------------------- | ------------------- | ---------------------------------------------- | \\-\\-animation\\-index | Select the animation to play. | \\-\\-animation\\-index=-1 | Play all animations at once (.gltf/.glb only). | \\-\\-animation\\-speed\\-factor | Time Unit = Seconds | Adjust time unit. | \\-\\-animation\\-frame\\-rate | 60 FPS | Adjust animation frame rate. | \\-\\-animation\\-time | Load a specific time value on start. | ## Animation Interactions - Press W to cycle through animations - Press Space to play/pause animation ## Time Units When F3D plays an animation, it assumes the time unit is in seconds to show accurate speed of animation. ## Coloring range When coloring while loading a time value or playing the animation, the coloring range will be automatically expanded from previously loaded time value, this include `--animation-time` that first load the initial time before loading the provided time value. ",
    "url": "/f3d/doc/user/ANIMATIONS.html",
    
    "relUrl": "/doc/user/ANIMATIONS.html"
  },"26": {
    "doc": "Color maps",
    "title": "Color maps",
    "content": "# Color maps ## Image files It is possible to specify a color map using the `--colormap-file` option. The value of the option can be an absolute path to an image file, a relative path, a filename or a filestem. If it is not an absolute path, these directories are used to find the file (in this order): - Linux: `${XDG_CONFIG_HOME}/f3d/colormaps`, `~/.config/f3d/colormaps`, `/etc/f3d/colormaps`, `/usr/share/f3d/colormaps`, `[install_dir]/share/f3d/colormaps` - Windows: `%APPDATA%\\f3d\\colormaps`, `[install_dir]\\share\\f3d\\configs\\colormaps` - macOS: `${XDG_CONFIG_HOME}/f3d/colormaps`, `~/.config/f3d/colormaps`, `/usr/local/etc/f3d/colormaps`, `f3d.app/Contents/Resources/configs/colormaps` The first existing file found is used. If it is a filestem, all [supported image](#supported-formats) extensions are tried. We provide some ready to use color maps files, listed in the table below: | Name | Image | ---------- | --------------------------------------------------------------------------------------------------------------------------------------- | cividis | | cubehelix | | gist_earth | | hot | | inferno | | magma | | plasma | | seismic | | viridis | It is possible to create a custom color map by creating a simple RGB image in any [supported formats](#supported-formats), and any resolution (if the height is more than 1 row, only the first one is taken into account). The image must be copied in the user config directory: - Linux/macOS: `~/.config/f3d/colormaps` - Windows: `%APPDATA%\\f3d\\colormaps` ### Supported formats Here's the list of all supported image formats that can be used as color maps: - `.png` - `.pnm`, `.pgm`, `.ppm` - `.tif`, `.tiff` - `.bmp` - `.slc` - `.hdr` - `.pic` - `.jpeg`, `.jpg` - `.MR` - `.CT` - `.mhd`, `.mha` - `.tga` - `.exr` (if `F3D_MODULE_EXR` is [enabled](/f3d/doc/dev/BUILD.html)) ## Custom values If no colormap file is specified, it is also possible to set values manually using the `--colormap` option with a dedicated [parsing](/f3d/doc/user/PARSING.html#colormap). For example, the default value corresponds to the `hot` preset which can be defined manually with `--colormap=0.0,rgb(0,0,0),0.4,rgb(230,0,0),0.8,rgb(230,230,0),1.0,rgb(255,255,255)`. It consists of 4 tuples: | Value | RGB | ----- | ----------------------------------------------------------------- | 0.0 | &#9632; 0, 0, 0 | 0.4 | &#9632; 230, 0, 0 | 0.8 | &#9632; 230, 230, 0 | 1.0 | &#9632; 255, 255, 255 | Values in between are interpolated. ",
    "url": "/f3d/doc/user/COLOR_MAPS.html",
    
    "relUrl": "/doc/user/COLOR_MAPS.html"
  },"27": {
    "doc": "Commands",
    "title": "Commands",
    "content": "# Commands F3D provides access to commands through [interactive console](#interactive-console), [command script](#command-script---command-script) and [bindings configuration](/f3d/doc/user/CONFIGURATION_FILE.html#bindings). Commands let you trigger specific behavior that may not be available otherwise. Please note commands are currently experimental and the behaviors, actions may be added or removed without deprecation. Action names and arguments may also change without deprecation. Commands have the following syntax: `action [args]` ## libf3d provided commands The libf3d provides a few commands, many related to manipulating libf3d (options)[../libf3d/OPTIONS.md]. `set option.name values`: A command to set a libf3d option, eg: `set scene.up.direction +Z` or `set render.hdri.file \"/path/to/file with spaces.png\"` `toggle option.name`: A command to toggle a boolean libf3d option, eg: `toggle ui.scalar_bar`. `reset option.name`: A command to reset a libf3d option to its default values, eg: `reset render.background.blur.coc`. `clear`: A command to clear console. No argument. `print option.name`: A command to print the value of an libf3d option, eg: `print scene.up.direction`. `cycle_anti_aliasing`: A command to cycle between the anti-aliasing method (`none`,`fxaa`,`ssaa`). `cycle_animation`: A specific command to cycle `scene.animation.index` option using model information, No argument. `cycle_coloring field/array/component`: A specific command to manipulate scivis options using model information. Supports `field`, `array` or `component` arguments, see [documentation](/f3d/doc/user/INTERACTIONS.html#cycling-coloring). eg: `cycle_coloring array`. `roll_camera value`: A specific command to roll the camera on its side, takes an angle in degrees as an argument. eg: `roll_camera 120`. `increase_light_intensity`: A specific command to increase light intensity. No argument. `decrease_light_intensity`: A specific command to decrease light intensity. No argument. `increase_opacity`: A specific command to increase opacity. Unset opacity will be treated as if it has a value of 1. No argument. `decrease_opacity`: A specific command to decrease opacity. Unset opacity will be treated as if it has a value of 1. No argument. `print_scene_info`: A specific command to print information about the scene, No argument. `print_coloring_info`: A specific command to print information about coloring settings, No argument. `print_mesh_info`: A specific command to print information from the mesh importer, No argument. `print_options_info`: A specific command to print configuration options that have a value, No argument. `set_camera front/top/right/isometric`: A specific command to position the camera in the specified location relative to the model. Supports `front`, `top`, `right`, `isometric` arguments. eg: `set_camera top`. `toggle_volume_rendering`: A specific command to toggle `model.volume.enable` and print coloring information. No argument. `stop_interactor`: A specific command to stop the interactor hence quitting the application. No argument. `reset_camera`: A specific command to reset the camera to its original location. No argument. `toggle_animation`: A specific command to start/stop the animation. No argument. `add_files [path/to/file1] [path/to/file2]`: A specific command to add files to the scene (overridden by a F3D specific command, see below). Take one or more files as arguments. eg: `add_files /path/to/dragon.vtu`. ## F3D provided specific commands The F3D application provides a few more commands. `exit`: A specific command to quit the application. No argument. `load_previous_file_group [keep_camera]`: A specific command to load the previous file or file group. Camera state is kept if `keep_camera` is true (default: false). `load_next_file_group [keep_camera]`: A specific command to load the next file or file group. No argument. Camera state is kept if `keep_camera` is true (default: false). `reload_current_file_group`: A specific command to reload the current file or file group. No argument. `add_current_directories`: A specific command to add all files from the current file or file group directories. No argument. `take_screenshot [filename]`: A specific command to [take a screenshot](/f3d/doc/user/INTERACTIONS.html#taking-screenshots). If filename is not specified, rely on the `--screenshot-filename` CLI option. eg: `take_screenshot path/to/file.png`. `take_minimal_screenshot [filename]`: A specific command to [take a minimal screenshot](/f3d/doc/user/INTERACTIONS.html#taking-screenshots). If filename is not specified, rely on the `--screenshot-filename` CLI option. eg: `take_screenshot path/to/file.png`. `add_files [path/to/file1] [path/to/file2]`: A specific command to add files to the scene according to the current grouping logic. Take one or more files as arguments. eg: `add_files /path/to/dragon.vtu`. `set_hdri [path/to/hdri]`: A specific command to set and use an HDRI image. Take a HDRI file as an argument. eg: `set_hdri /path/to/file.hdr`. `add_files_or_set_hdri [path/to/file1] [path/to/file2]`: A specific command that will process each files and either, `set_hdri` if the provided file uses a recognised HDR extension or `add_files` otherwise. Take one or more files as arguments. eg: `add_files_or_set_hdri /path/to/dragon.vtu /path/to/file.hdr`. `remove_file_groups`: A specific command to remove all files. No argument. `alias [alias_name] [command]`: A specific command to create an alias for a command. Take an alias name and a command as arguments. eg: `alias myrotate roll_camera 90`. ## Command Script (`--command-script`) F3D provides a feature to execute commands from a script file using the `--command-script` [CLI option](/f3d/doc/user/OPTIONS.html). This allows users to automate a sequence of commands by listing them in a plain text file, eg: `f3d --command-script path/to/command_script.txt`. Example Command Script, commands are separated by new lines, comments are supported: ```shell # A comment roll_camera 90 toggle ui.scalar_bar print_scene_info # Another comment increase_light_intensity ``` ## Interactive Console If F3D is built with `F3D_MODULE_UI` support, pressing Esc will open the console mode. It's possible to type any command in the input field and pressing Enter will trigger the command instantly. Press Tab to autocomplete the command action and display command action suggestions. Press &uarr; and &darr; to navigate through the command history. ## Command syntax Command syntax is similar to bash, as in they will be split by \"token\" to be processed. - Tokens are spaces separated, eg: `set scene.up.direction +Z`. - Tokens can also be quoted to support spaces inside, eg: `set render.hdri.file \"/path/to/file with spaces.png\"`. - Supported quotes are `` `'\" ``, eg: `set render.hdri.file '/path/to/file with spaces.png'`. - Quotes inside quotes are supported as well, eg: `set render.hdri.file \"/path/to/file'with'quotes.png\"`. - Quotes and spaces can be escaped, eg: `set render.hdri.file /path/to/file\\ with\\ spaces\\ and\\ \\'quotes\\\".png`. - Comment are supported using `#`, Any character after will be ignored. Use `\\#` to add it verbatim. - Escapes can be escaped too: eg: `set render.hdri.file C:\\\\path\\\\to\\\\windows\\\\file.png`. - Other escaped character will be processed as if the escape was not present, eg: `set scene.up.direction +\\Z` - Unfinished quoted section is invalid, eg: `set scene.up.direction \"+Z` - A escape at the end is also invalid, eg: `set scene.up.direction +Z\\` - Options values are [parsed](/f3d/doc/user/PARSING.html) according to their types. ",
    "url": "/f3d/doc/user/COMMANDS.html",
    
    "relUrl": "/doc/user/COMMANDS.html"
  },"28": {
    "doc": "Configuration File",
    "title": "Configuration File",
    "content": "# Configuration File ## Options Almost all the command-line [options](/f3d/doc/user/OPTIONS.html) can be controlled using configuration files. Configuration files uses the \"long\" version of the command-line options in a JSON formatted file to provide values for these options. It is also possible to use the [libf3d options](/f3d/doc/libf3d/OPTIONS.html) syntax. These options can be organized by block using a regular expression for each block in order to provide different default values for the different filetypes. Using a command-line option will override similar option set in any config files. Some options are only taken into account on the first load and not on subsequent loads, when switching between files. A typical config file with options may look like this: ```json [ { \"options\": { \"background-color\": \"0.7,0.7,0.7\", \"color\": \"0.5,0.1,0.1\", \"anti-aliasing\": true, \"timer\": true, \"progress\": true, \"axis\": true, \"bar\": true, \"roughness\": 0.2, \"grid\": true, \"scalar-coloring\": true } }, { \"match\": \".*vt.\", \"options\": { \"edges\": true } }, { \"match\": \".*gl(tf|b)\", \"options\": { \"raytracing\": true, \"denoise\": true, \"samples\": 3 } }, { \"match\": \".*mhd\", \"options\": { \"volume\": true } } ] ``` Here, the first block defines a basic configuration with many desired options for all files. The second block specifies that all files ending with vt., eg: vtk, vtp, vtu, ... will be shown with edges visibility turned on. The third block specifies raytracing usage for .gltf and .glb files. The last block specifies that volume rendering should be used with .mhd files. The following options cannot be set via config file: `help`, `version`, `list-readers`, `list-rendering-backends`, `scan-plugins`, `config`, `no-config`, `define`, `reset` and `input`. The following options are only taken on the first load: `no-render`, `output`, `position`, `resolution`, `frame-rate` and all testing options. Boolean options that have been turned on in the configuration file can be turned off on the command line if needed, eg: `--point-sprites=false`. ### Imperative Options Command line options and options that are changed interactively overrides options that are set in configuration files. This is not always a desired behavior, so in order to force an option to always be taken into account even if set in command line or changed interactively, it is possible to use imperative options, by adding a `!` in front of the option name, eg: ```json [ { \"options\": { \"!axis\": true } }, { \"match\": \".*(stl)\", \"options\": { \"!edges\": true } } ] ``` In the above example, when loading or reloading a file, the axis is always turned on and when loading a .stl file, the edges are always turned on. ## Bindings All interaction bindings can be configured using configuration files. The logic is the same as with options, where configuration blocks are used depending on the filename being loaded using regular expression. A `bindings` block can be added to specify associations between binds (eg : `Ctrl+O`) and one or multiple commands. A typical config file with bindings may look like this: ```json [ { \"bindings\": { \"Ctrl+Shift+O\": \"toggle ui.filename\", \"Any+3\": \"roll_camera -90\", \"O\": \"set_camera isometric\" } }, { \"match\": \".*vtu\", \"bindings\": { \"Any+3\": \"roll_camera 90\", \"Shift+O\": \"toggle model.point_sprites.enable\", \"Ctrl+O\": [ \"toggle render.grid.enable\", \"toggle scene.camera.orthographic\" ], \"None+I\": \"toggle ui.axis\" } } ] ``` Here, the first block define new bindings for all and any files. It even replace an existing default [interaction](/f3d/doc/user/INTERACTIONS.html) on the `O` key with its own. Each bind is associated to the [command](/f3d/doc/user/COMMANDS.html) to execute when it is pressed. In the second block, new bindings are defined for files ending in `.vtu`, and there bindings will only be available when loading such a file. In the first config block, we define bindings for all and any files. It also replace an existing default interaction on the `Any+3` bind and even define a bindings that have multiple commands using a json array on the `Ctrl+O` bind. Please note this configuration feature is only available through config file and not through the command line. However, it is possible to check your current binding configuration by using the `--list-bindings` CLI options. ### Bind A bind is the association of a modifier and an interaction. Supported modifiers are: `None` : No modifiers is pressed, can be omitted completely. `Ctrl` : Control key is pressed, no distinction between left and right. `Shift` : Shift key is pressed, no distinction between left and right. `Ctrl+Shift` : Control and Shift keys are pressed, no distinction between left and right. `Any` : A special modifier that does not consider modifiers keys but can only be reached if there is no bind with the same interaction. Supported interactions are legion, eg: - Keyboard letter keys, eg: - `O` - `P` - Keyboard number keys, eg: - `2` - `5` - Keyboard special keys, eg: - `Enter` - `Delete` - Other interactions, eg: - `Drop` when files or folders are dropped on F3D window To identify the interaction to use, just use `f3d --verbose` and perform the interaction, F3D will log it like this: ``` Interaction: KeyPress Ctrl+Shift+Insert ``` Please note that the interaction itself can be modified by the modifiers, hence some binds may be unreachable depending on your keyboard layout, eg. on a `QWERTY` layout, the bind `Exclam` is unreachable while `Shift+Exclam` is reachable. We tried to make the default bindings of F3D to be a keyboard layout independent as possible, but feel free to redefined them for your needs. ## Locations Single .json file for configuration is supported, as well a config directory containing multiple .json config files. In the case of config directory, .json file are read in alphabetical order and an option or binding in a block can be overridden by the same option or bind being set in another block in another .json file read after. F3D provides a default config directory for generic usage (`config.d`) and a thumbnail specific config directory (`thumbnail.d`). You can edit the file contained in these directory or add your own in specific directories (see below). F3D looks for configuration files in different locations depending on your operating system. Existing configuration files are read in order and combined with later entries, potentially overriding previously read entry with the same names. - Linux: `/etc/f3d/config(.json,.d)`, `/usr/share/f3d/configs/config(.json,.d)`, `[install_dir]/share/f3d/configs/config(.json,.d)`, `${XDG_CONFIG_HOME}/f3d/config(.json,.d)` - Windows: `[install_dir]\\share\\f3d\\configs\\(config.json,.d)`, `%APPDATA%\\f3d\\(config.json,.d)` - macOS: `/usr/local/etc/f3d/config(.json,.d)`, `f3d.app/Contents/Resources/configs/config(.json,.d)`, `${HOME}/Library/Application Support/f3d/config(.json,.d)` Please note that, on Linux, `XDG_CONFIG_HOME` implementation can fallback on `HOME` environment variables as specified [here](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html). The binary release will install the default config directory. On Linux, they will be installed in `[install_dir]/share/f3d/configs/`, on Windows, they will be installed in `[install_dir]\\share\\f3d\\configs\\`, on macOS, it will be installed in the bundle. Please note there is a command line option to control the configuration file to read. Using it, one can specify an absolute/relative path for the configuration path, but also only the filename or filestem (`.json` and `.d` will be added) to look for in the locations listed above, , eg: `f3d --config=custom_config` will look for `custom_config.json` and `custom_config.d` in locations listed above. When specifying an absolute/relative path for the configuration file, a single file is read. If not, all files from locations listed above, with the overriding logic specified above. ",
    "url": "/f3d/doc/user/CONFIGURATION_FILE.html",
    
    "relUrl": "/doc/user/CONFIGURATION_FILE.html"
  },"29": {
    "doc": "Desktop Integration",
    "title": "Desktop Integration",
    "content": "# Desktop Integration F3D can be integrated in the desktop experience. ## Linux For Linux desktop integration, F3D rely on mime types files as defined by the [XDG standard](https://specifications.freedesktop.org/mime-apps-spec/mime-apps-spec-latest.html), .thumbnailer file as specified [here](https://wiki.archlinux.org/title/File_manager_functionality#Thumbnail_previews) and .desktop file as specified [here](https://wiki.archlinux.org/title/desktop_entries). Many file managers use this mechanism, including nautilus, thunar, pcmanfm and caja. The simplest way to obtain desktop integration on Linux is to use a package for your distribution, or the .deb binary release package we provide if compatible with your distribution. In other cases, the binary release archive can be used like this: 0. Make sure `~/.local/bin` is part of your `PATH` 1. Extract F3D binary release archive in `~/.local/` 2. Update your [mime database](https://linux.die.net/man/1/update-mime-database) pointing to `~/.local/share/mime` 3. Update your [desktop database](https://linuxcommandlibrary.com/man/update-desktop-database) pointing to `~/.local/share/application` ```bash export PATH=$PATH:~/.local/bin tar -xzvf f3d-1.3.0-Linux.tar.gz -C ~/.local/ sudo update-mime-database ~/.local/share/mime/ sudo update-desktop-database ~/.local/share/applications ``` F3D supports rendering in environments with limited graphical contexts, including sandboxes or without Xorg running. In most cases, the default behavior will automatically detect which capabilities are available and use the right rendering backend, it is possible to specify it using the `--rendering-backend` CLI option. - If `libEGL.so` is available, you can use: `--rendering-backend=egl`. - If `libOSMesa.so` is available, you can use: `--rendering-backend=osmesa`. - When using `--rendering-backend=auto`, F3D will try to load the following libraries in order and use the first one it was able to load and use: - `libGLX.so` - `libEGL.so` - `libOSMesa.so` You can use that feature for thumbnail generation whenever needed (e.g., Nautilus or other sandboxing file browser), by modifying the [thumbnail config file](/f3d/doc/user/CONFIGURATION_FILE.html), eg:`~/.config/f3d/thumbnail.json`: ```javascript { \".*\": { \"rendering-backend\": \"egl\" } } ``` If you use the portable archive, make sure to extract it somewhere the sandboxing system has access to, eg: Nautilus uses `bwrap` and gives it access to `/usr` but not to `/opt`. ## Windows For Windows desktop integration, F3D rely on a registered shell extension. Using the F3D NSIS installer (.exe) is the simplest way to enable thumbnails and integrate F3D on windows. It is also possible to do it manually when using the zipped binary release archive, on installation, just run: ``` cd C:\\path\\to\\f3d\\bin\\ regsvr32 F3DShellExtension.dll ``` To remove the shell extension, run: ``` cd C:\\path\\to\\f3d\\bin\\ regsvr32 /u F3DShellExtension.dll ``` ## MacOS There is no support for thumbnails on MacOS, the .dmg binary release provides automatic file openings. ## Limitations - TIFF files are excluded from the thumbnailer to avoid conflicts with other better 2D thumbnailers. ",
    "url": "/f3d/doc/user/DESKTOP_INTEGRATION.html",
    
    "relUrl": "/doc/user/DESKTOP_INTEGRATION.html"
  },"30": {
    "doc": "Final shaders",
    "title": "Final shaders",
    "content": "# Final shaders It is possible to specify a final full screen shader with the option `--final-shader`. It is executed as the last shader in the rendering pipeline. The shader code can be passed directly as a single code line. It's possible to pass the content of a shader file using the following command: ```sh f3d model.obj --final-shader \"$(cat final.glsl)\" ``` Note that the command above works on Linux and bash, and should be adapted depending on the operating system and the shell/terminal used. ## Requirements It is required to implement the function `vec4 pixel(vec2 uv)`. The value `uv` is ranging from 0 to 1 in both directions. `(0,0)` is the bottom left corner, and `(1,1)` is the upper right corner. The first component is the horizontal direction. ## Uniforms It is possible to access these uniforms: - `source` (type: `sampler2d`): texture of the image generated by rendering pipeline. - `resolution` (type: `ivec2`): resolution of the texture `source`. ## Examples Here are three shader examples to illustrate how an implementation looks like. ### Negative ```glsl vec4 pixel(vec2 uv) { vec3 value = texture(source, uv).rgb; return vec4(vec3(1.0) - value, 1.0); } ``` ### Vignette ```glsl vec4 pixel(vec2 uv) { float l = clamp(1.0 - 2.0 * length(uv - 0.5), 0.0, 1.0); return vec4(l*texture(source, uv).rgb, 1.0); } ``` ### Box blur ```glsl vec4 pixel(vec2 uv) { const float radius = 0.03; const int samples = 20; const float step = radius / float(samples); vec3 sum = vec3(0); for (int i = -samples; i <= samples; i++) { for (int j = -samples; j <= samples; j++) { sum += texture(source, uv + vec2(i, j) * step).rgb; } } float d = 1.0 + 2.0 * float(samples); sum /= d * d; return vec4(sum, 1.0); } ``` ",
    "url": "/f3d/doc/user/FINAL_SHADER.html",
    
    "relUrl": "/doc/user/FINAL_SHADER.html"
  },"31": {
    "doc": "Installation",
    "title": "Installation",
    "content": "# Installation ## Current release packages (3.1.0) | Platform | Files | ---------------------- | --------------------------------------------------------------------------------------------------------------------------- | Windows (installer) | [F3D-3.1.0-Windows.exe](https://github.com/f3d-app/f3d/releases/download/v3.1.0/F3D-3.1.0-Windows-x86_64-raytracing.exe) | Windows (portable) | [F3D-3.1.0-Windows.zip](https://github.com/f3d-app/f3d/releases/download/v3.1.0/F3D-3.1.0-Windows-x86_64-raytracing.zip) | MacOS (Silicon) | [F3D-3.1.0-macOS-arm64.dmg](https://github.com/f3d-app/f3d/releases/download/v3.1.0/F3D-3.1.0-macOS-arm64-raytracing.dmg) | MacOS (Intel) | [F3D-3.1.0-macOS-x86_64.dmg](https://github.com/f3d-app/f3d/releases/download/v3.1.0/F3D-3.1.0-macOS-x86_64-raytracing.dmg) | Linux (Debian package) | [F3D-3.1.0-Linux.deb](https://github.com/f3d-app/f3d/releases/download/v3.1.0/F3D-3.1.0-Linux-x86_64-raytracing.deb) | Linux (portable) | [F3D-3.1.0-Linux.tar.xz](https://github.com/f3d-app/f3d/releases/download/v3.1.0/F3D-3.1.0-Linux-x86_64-raytracing.tar.xz) | ### Notes - MacOS package is not signed, see the [troubleshooting](/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html#macos) section for a workaround if needed. - MacOS packages require macOS >= 12.0 - Linux packages require GLIBC >= 2.31 ## Alternatives You can find other (older, smaller, checksum, RCs) release related packages and files on the [releases page](https://github.com/f3d-app/f3d/releases). You can also find there the [nightly release](https://github.com/f3d-app/f3d/releases/tag/nightly) to test the development version of F3D. See the [desktop integration](/f3d/doc/user/DESKTOP_INTEGRATION.html) section in order actually integrate the binary release in your desktop. Alternatively, you can build F3D yourself by following the [build](/f3d/doc/dev/BUILD.html) guide. You can also find packages for the following repositories: ### Windows - [Scoop](https://scoop.sh/#/apps?q=f3d&s=0&d=1&o=true) - [winget](https://winstall.app/apps/f3d-app.f3d) ### MacOS - [Homebrew](https://formulae.brew.sh/formula/f3d) ### Linux - [Ubuntu](https://packages.ubuntu.com/search?keywords=f3d&searchon=names&exact=1&suite=all&section=all) - [Debian](https://packages.debian.org/search?keywords=f3d&searchon=names&exact=1&suite=all&section=all) - [Arch](https://archlinux.org/packages/extra/x86_64/f3d/) - [NixOS](https://search.nixos.org/packages?query=f3d) - [openSUSE](https://software.opensuse.org/package/f3d) - [OpenMandriva](https://github.com/OpenMandrivaAssociation/f3d) - [Mageia](https://madb.mageialinux-online.org/show?distribution=cauldron&architecture=x86_64&rpm=f3d&repo=&group=&page=) - [ALT Linux](https://packages.altlinux.org/en/sisyphus/srpms/f3d/) - Fedora and others through [openSUSE OBS](https://build.opensuse.org/package/show/home:AndnoVember:F3D/f3d) - [Guix](https://hpc.guix.info/package/f3d) - [Flathub](https://flathub.org/apps/details/io.github.f3d_app.f3d) - [ALT linux](https://packages.altlinux.org/en/sisyphus/srpms/f3d/) ### Other - [FreeBSD](https://cgit.freebsd.org/ports/tree/graphics/f3d) - [Spack](https://packages.spack.io/package.html?name=f3d) - [pypi](https://pypi.org/project/f3d/) (library only) ### libf3d based tools - [Exhibit](https://flathub.org/apps/io.github.nokse22.Exhibit) - [f3dviewer](https://github.com/ccseer/f3dviewer) ",
    "url": "/f3d/doc/user/INSTALLATION.html",
    
    "relUrl": "/doc/user/INSTALLATION.html"
  },"32": {
    "doc": "Interactions",
    "title": "Interactions",
    "content": "# Interactions ## 3D Mouse Interactions Simple interaction with the displayed data is possible directly within the window. It is as follows: - _Click and drag_ with the _left_ mouse button to rotate around the focal point of the camera. - Hold Shift then _Click and drag_ with the _left_ mouse button to translate the camera. - Hold Ctrl then _Click and drag_ with the _left_ mouse button to rotate around the axis of the camera. - Hold Shift then _Click and drag_ horizontally with the _right_ mouse button to rotate the HDRI. - _Click and drag_ vertically with the _right_ mouse button to zoom in/out. - _Move the mouse wheel_ to zoom in/out. - Hold Ctrl, then _Click and drag_ vertically with the _right_ mouse button to zoom in/out to mouse position. - Hold Ctrl, then _Move the mouse wheel_ to zoom in/out to mouse position. - _Click and drag_ with the _middle_ mouse button to translate the camera. - _Click_ with the _middle_ mouse button to center the camera on the point under the cursor (hold Shift to allow forward or backward movement). > Note: When playing an animation with a scene camera, camera interactions are locked. ## Bindings The coloring can be controlled directly by pressing the following hotkeys: - A: cycle between anti-aliasing modes. - C: cycle between coloring with array from point data and from cell data. - S: cycle the array to color with. - Y: cycle the component of the array to color with. See the [coloring cycle](#cycling-coloring) section for more info. Other options can be toggled directly by pressing the following hotkeys: - W: cycle animations. - B: display of the scalar bar, only when coloring and not using direct scalars. - V: volume rendering, forces coloring. - I: opacity function inversion during volume rendering. - O: point sprites rendering. - P: translucency support. - Q: ambient occlusion. - T: tone mapping. - E: the display of cell edges. - X: the trihedral axes display. - G: the horizontal grid display. - N: the display of the file name. - M: the display of the metadata if exists. - Z: the display of the FPS counter. - R: raytracing. - D: the denoiser when raytracing. - U: background blur, useful with an HDRI skybox. - K: trackball interaction mode. - F: HDRI ambient lighting. - J: the display of the HDRI skybox. - L: increase lights intensity. - Shift+L: decrease lights intensity. - Ctrl+P: increase opacity. - Shift+P: decrease opacity. - Shift+A: toggle armature. Note that the raytracing hotkeys are only available if F3D is build with raytracing enabled. Camera Hotkeys: - 1: front view camera. - 3: right view camera. - 4: roll the camera left by 90 degrees. - 5: toggle orthographic projection. - 6: roll the camera right by 90 degrees. - 7: top view camera. - 9: isometric view camera. - Enter: reset the camera to its initial parameters. Other hotkeys and interactions are available: - H: key to toggle the display of a cheat sheet showing all these hotkeys and their statuses. - CTRL + Q: close the window and quit F3D. - Esc: display the console or hide console/minimal console. - :: display the minimal console - Space: play the animation if any. - &larr;: load the previous file if any and reset the camera. - &rarr;: load the next file if any and reset the camera. - &uarr;: reload the currently loaded files. - &darr;: add all current files parent directories to the list of files, reload the currently loaded files and reset the camera. - F12: take a screenshot, ie. render the current view to an image file. - Ctrl + F12: take a \"minimal\" screenshot, ie. render the current view with no grid and no overlays to an image file with a transparent background. - _Drop_ a file, directory or HDRI into the F3D window to load it. F3D relies on the extension (`.hdr` or `.exr`) to detect if the dropped file is an HDRI. - Ctrl + _Drop_ a file, directory and load it. - Shift + _Drop_ a HDRI and use it, no extensions checks performed. When loading another file or reloading, options that have been changed interactively are kept as is, except when using [imperative options](/f3d/doc/user/CONFIGURATION_FILE.html#imperative-options) in configuration files. ## Cycling Coloring The following hotkeys let you cycle the coloring of the data: - C: cycle between point data and cell data - field data is not supported. - S: cycle the array available on the currently selected data in alphabetical order, skipping array not containing numeric data. It will loop back to not coloring unless using volume rendering. - Y: cycle the component available on the currently selected array, looping to -2 for direct scalars rendering. When changing the array, the component in use will be kept if valid with the new array, if not it will be cycled until a valid component is found. When changing the type of data to color with, the index of the array within the data will be kept if valid with the new data. If not, it will cycle until a valid array is found. After that, the component will be checked as specified above. ## Taking Screenshots The destination filename used to save the screenshots (created by pressing F12 or Ctrl + F12) is configurable (using the `screenshot-filename` option) and can use template variables as described [on the options page](/f3d/doc/user/OPTIONS.html#filename-templating). Unless the configured filename template is an absolute path, images will be saved into the user's home directory (using the following environment variables, if defined and pointing to an existing directory, in that order: `XDG_PICTURES_DIR`, `HOME`, or `USERPROFILE`). ## Configuring bindings It is supported to change all bindings above using a specific syntax in the [configuration file](/f3d/doc/user/CONFIGURATION_FILE.html) using [commands](/f3d/doc/user/COMMANDS.html). ",
    "url": "/f3d/doc/user/INTERACTIONS.html",
    
    "relUrl": "/doc/user/INTERACTIONS.html"
  },"33": {
    "doc": "Limitations and Troubleshooting",
    "title": "Limitations and Troubleshooting",
    "content": "# Limitations Here is a non exhaustive list of F3D limitations: - No support for specifying manual lighting in the default scene apart from using `--light-intensity` option. - Multiblock (.vtm, .gml) support is partial, non-surfacic data will be converted into surfaces. - Drag and drop interaction cannot be recorded nor played back. - Volume rendering and HDRI support requires a decent GPU. - The `--camera-zoom-factor` option require VTK >= 9.3.0 - Information about the failure to load a file is not provided before VTK >= 9.4.0 ## Assimp FBX, DAE, OFF, DXF, X and 3MF file formats rely on [Assimp](https://github.com/assimp/assimp) library. It comes with some known limitations: - PBR materials are not supported for FBX file format. - Complex animations are not working very well with Assimp 5.1, it's recommended to use Assimp 5.0 for this use case. - Only one animation can be shown at a time, showing all animations is not supported yet. - Some files can be empty, crash, or show artifacts. - DXF support is very limited: only files with polylines and 3D faces are displayed. - 3MF files may crash at exit (issue in Assimp: https://github.com/assimp/assimp/issues/5328) - Only support RBGA 8-bits embedded textures ## Alembic ABC file formats rely on [Alembic](https://github.com/alembic/alembic) library. It comes with some known limitations: - Supports only simple polygonal geometry. - Does not support ArbGeomParam feature in Alembic. - Does not support Subdivision Meshes. - Does not support Materials. - Does not support Animations. ## USD USD file formats rely on [OpenUSD](https://github.com/PixarAnimationStudios/OpenUSD) library. It comes with some known limitations: - Skinning is slow and baked on the CPU. - Does not support Face-varying attributes. - The `usd` plugin is not shipped in the python wheels yet. ## VDB VDB file formats rely on [OpenVDB](https://github.com/AcademySoftwareFoundation/openvdb) and VTK libraries. It currently comes with some known limitations: - VDB Grid files are opened with a hard-coded 0.1 sampling rate. - The `vdb` plugin is not shipped in the python wheels yet. ## Gaussian splatting Gaussian splatting (option `--point-sprites-type=gaussian`) needs depth sorting which is done internally using a compute shader. This requires support for OpenGL 4.3 which is not supported by macOS and old GPUs/drivers. # Troubleshooting ## General > I have built F3D with raytracing support but the denoiser is not working. Make sure that VTK has been built with _OpenImageDenoise_ support (`VTKOSPRAY_ENABLE_DENOISER` option). > My model shows up all wrong, with inverted surfaces everywhere. Your data probably contains some translucent data for some reason, turn on translucency support by pressing `P` or using the `-p` command line option. ## Linux > I have a link error related to `stdc++fs` not found or I'm unable to run F3D due to filesystem errors. With some C++ STD library version, explicit linking to `stdc++fs` is not supported or required. We provide a CMake option `F3D_LINUX_LINK_FILESYSTEM` that you can set to the desired value to workaround this issue. > I have a link error related to undefined reference to symbol of `libatomic`. The GCC flag `-latomic` is not being added automatically with specific architectures, like `armel` and `RISCV64`. We provide a CMake option `F3D_LINUX_LIBRARY_LINK_ATOMIC` that you can set to `ON` to workaround this issue. > Thumbnails are not working in my file manager. - Check that your file manager supports the thumbnailer mechanism. - Check that you have updated your mime type database. - If all fails, remove your `.cache` user dir and check that `pcmanfm` thumbnails are working. - If they are working, then it is an issue specific to your file manager (see below for a potential work around). - If only a few format have working thumbnails, then it is an issue with the mime types database. - If no formats have working thumbnails, then it is can be an issue with sandboxing or with the `f3d-plugin-xxx.thumbnailer` files. - If only big file do not have thumbnails, this is intended, you can modify this behavior in the `thumbnail.d/05_all.json` configuration folder using the `max-size` option. > `--rendering-backend` CLI option is not working as expected Dynamically switching rendering backend require VTK 9.4.0, you may need to update VTK or to use our [binary release](/f3d/doc/user/INSTALLATION.html). > I'm unable to link C++ examples against my local F3D install directory, it complains about missing VTK symbols Make sure to have VTK installed in your system or to add VTK install lib directory to `LD_LIBRARY_PATH`. ## Windows > Using the portable binary release, I'm unable to run F3D because Windows warns about a security risk F3D is not signed by Microsoft yet so Windows shows this warning. Just click on the \"more\" button to be able to run F3D. > After installing F3D or registering the shell extension, my explorer is broken. Unregister the shell extension by running: ``` cd C:\\path\\to\\f3d\\bin\\ regsvr32 /u F3DShellExtension.dll ``` > I use F3D in a VM, the application fails to launch. OpenGL applications like F3D can have issues when launched from Windows Server or from a guest Windows because the access to the GPU is restricted. You can try to use a software implementation of OpenGL, called [Mesa](https://github.com/pal1000/mesa-dist-win/releases). - Download the latest `release-msvc`. - copy `x64/opengl32.dll`, `libgallium_wgl.dll` and `x64/libglapi.dll` in the same folder as `f3d.exe`. - set the environment variable `MESA_GL_VERSION_OVERRIDE` to 4.5. - run `f3d.exe`. > I run f3d from the command prompt and my Unicode characters are not displayed properly. Set the codepage to UTF-8, run `chcp 65001`. > When I install F3D, I can't add F3D to the path and the installer complains that: `PATH too long installer unable to modify PATH!`. There are too many entry in your PATH environment variable, remove the ones you do not use. > When I try to update F3D, the installer fails with: `Error opening file for writing: F3DShellExtension.dll` Your previous F3D installation is current being used to generate thumbnails, wait for a bit or reboot your computer before updating again. > When running F3D without interactivity (e.g. `f3d.exe --version`) from CLI, nothing is displayed. It's a limitation from the Windows \"subsystem\". Use `f3d-console.exe` instead. > When playing an animation, the animation appear to move too slowly This is a limitation of older VTK version before VTK 9.5.0, use our [binaries](/f3d/doc/user/INSTALLATION.html) or compile a recent version of VTK. ## macOS > I'm unable to use the binary release, macOS complains the file is invalid or corrupted Our macOS binary package are not signed, to work around this, you can simply run the following command: ``` xattr -cr /Applications/F3D.app ``` Then F3D should work as expected. ## Python > I can't find `usd` and `vdb` plugins after installing f3d with pip The `usd` and `vdb` plugins are not shipped in the python wheels for now, you can compile F3D yourself with them though. > Raytracing does not work after installing f3d with pip F3D raytracing feature is not shipped in the python wheels for now, you can compile F3D yourself with it though. ",
    "url": "/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html",
    
    "relUrl": "/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html"
  },"34": {
    "doc": "Options",
    "title": "Options",
    "content": "# Command line options F3D behavior can be fully controlled from the command line using the following options. ## Application Options | Options | TypeDefault | Description | ----------------------------------------------------- | --------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | \\-\\-input=\\ | string- | The input file or files to read, can also be provided as a positional argument. | \\-\\-output=\\ | string- | Instead of showing a render view and render into it, _render directly into a png file_. When used with \\-\\-ref option, only outputs on failure. If `-` is specified instead of a filename, the PNG file is streamed to the stdout. Can use [template variables](#filename-templating). | \\-\\-no-background | boolfalse | Use with \\-\\-output to output a png file with a transparent background. | -h, \\-\\-help | Print _help_ and exit. Ignore `--verbose`. | \\-\\-version | Show _version_ information and exit. Ignore `--verbose`. | \\-\\-list-readers | List available _readers_ and exit. Ignore `--verbose`. | \\-\\-list-bindings | List available _bindings_ and exit. Ignore `--verbose`. | \\-\\-list-rendering-backends | List available _rendering backends_ and exit. Ignore `--verbose`. | \\-\\-config=\\ | stringconfig | Specify the [configuration file](/f3d/doc/user/CONFIGURATION_FILE.html) to use. Supports absolute/relative path but also filename/filestem to search for in standard configuration file locations. | \\-\\-no-config | boolfalse | Do not read any configuration file and consider only the command line options. | \\-\\-no-render | boolfalse | Do not render anything and quit just after loading the first file, use with \\-\\-verbose to recover information about a file. | \\-\\-max-size=\\ | int-1 | Prevent F3D to load a file bigger than the provided size in Mib, leave empty for unlimited, useful for thumbnails. | \\-\\-watch | boolfalse | Watch current file and automatically reload it whenever it is modified on disk. | \\-\\-frame-rate=\\ | double30.0 | Frame rate used to refresh animation and other repeated tasks (watch, UI). Does not impact rendering frame rate. | \\-\\-load-plugins=\\ | string- | List of plugins to load separated with a comma. Official plugins are `alembic`, `assimp`, `draco`, `hdf`, `occt`, `usd`, `vdb`. See [plugins](/f3d/doc/user/PLUGINS.html) for more info. | \\-\\-scan-plugins | Scan standard directories for plugins and display their names, results may be incomplete. See [plugins](/f3d/doc/user/PLUGINS.html) for more info. | \\-\\-screenshot-filename=\\ | string`{app}/{model}_{n}.png` | Filename to save [screenshots](/f3d/doc/user/INTERACTIONS.html#taking-screenshots) to. Can use [template variables](#filename-templating). Supports relative paths [as described](/f3d/doc/user/INTERACTIONS.html#taking-screenshots). | \\-\\-rendering-backend=\\ | stringauto | Rendering backend to load, `auto` means to let F3D pick the correct one for you depending on your system capabilities. Use `egl` or `osmesa` on linux to force headless rendering. | -D, \\-\\-define=\\ | special- | A repeatable option to set [libf3d](/f3d/doc/libf3d/OPTIONS.html) and [reader](/f3d/doc/user/SUPPORTED_FORMATS.html#reader-options) option manually. May trigger unexpected behavior. | -R, \\-\\-reset=\\ | special- | A repeatable option to reset [libf3d options](/f3d/doc/libf3d/OPTIONS.html) manually. Useful when overidding option set in [configuration files](/f3d/doc/user/CONFIGURATION_FILE.html). | ## General Options | Options | TypeDefault | Description | ---------------------------------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | \\-\\-verbose=\\ | stringinfo | Set _verbose_ level, in order to provide more information about the loaded data in the output. If no level is provided, assume `debug`. Option parsing may ignore this flag. | \\-\\-progress | boolfalse | Show a _progress bar_ when loading the file. | \\-\\-animation-progress | boolfalse | Show a _progress bar_ when playing the animation. | \\-\\-multi-file-mode=\\ | stringsingle | When opening multiple files, select if they should be shown all at once (`all`), one by one (`single`), or by directory (`dir`). Configuration files for all loaded files will be used in the order they are provided. | \\-\\-up=\\ | direction+Y | Define the Up direction. | -x, \\-\\-axis | boolfalse | Show _axes_ as a trihedron in the scene. | -g, \\-\\-grid | boolfalse | Show _a grid_ aligned with the horizontal (orthogonal to the Up direction) plane. | \\-\\-grid\\-unit=\\ | double- | Set the size of the _unit square_ for the grid. If not set (the default) a suitable value will be automatically computed. | \\-\\-grid\\-subdivisions=\\ | int10 | Set the number of subdivisions for the grid. | \\-\\-grid\\-color=\\ | color0,0,0 | Set the color grid lines. | -e, \\-\\-edges | boolfalse | Show the _cell edges_. | \\-\\-armature | boolfalse | Show armature if present (glTF only). | \\-\\-camera-index=\\ | int- | Select the scene camera to use when available in the file. Automatically computed by default. | -k, \\-\\-trackball | boolfalse | Enable trackball interaction. | \\-\\-animation-autoplay | boolfalse | Automatically start animation. | \\-\\-animation-index=\\ | int0 | Select the animation to show.Any negative value means all animations (glTF only).The default scene always has at most one animation. | \\-\\-animation-speed-factor=\\ | ratio1 | Set the animation speed factor to slow, speed up or even invert animation time. | \\-\\-animation-time=\\ | double- | Set the animation time to load. | \\-\\-font-file=\\ | path- | Use the provided FreeType compatible font file to display text.Can be useful to display non-ASCII filenames. | \\-\\-font-scale=\\ | ratio1.0 | Scale fonts. | \\-\\-command-script=\\ | script- | Provide a script file containing a list of commands to be executed sequentially.Allows automation of multiple commands or pre-defined tasks. | ## Material options | Options | TypeDefault | Description | ------------------------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -o, \\-\\-point-sprites | boolfalse | Show sphere _points sprites_ instead of the geometry. | \\-\\-point-sprites-type=\\ | stringsphere | Set the splat type when showing point sprites. | \\-\\-point-sprites-size=\\ | double10.0 | Set the _size_ of point sprites. | \\-\\-point-size=\\ | double- | Set the _size_ of points when showing vertices. Model specified by default. | \\-\\-line-width=\\ | double- | Set the _width_ of lines when showing edges. Model specified by default. | \\-\\-backface-type=\\ | string- | Set the Backface type. Model specified by default. | \\-\\-color=\\ | color- | Set a _color_ on the geometry. Multiplied with the base color texture when present. Model specified by default. | \\-\\-opacity=\\ | double- | Set _opacity_ on the geometry. Multiplied with the base color texture when present. Model specified by default. Usually used with Depth Peeling option. | \\-\\-roughness=\\ | double- | Set the _roughness coefficient_ on the geometry (0.0-1.0). Multiplied with the material texture when present. Model specified by default. | \\-\\-metallic=\\ | double- | Set the _metallic coefficient_ on the geometry (0.0-1.0). Multiplied with the material texture when present. Model specified by default. | \\-\\-base-ior=\\ | double- | Set the _index of refraction of the base layer_ (1.0-2.5). Model specified by default. | \\-\\-hdri-file=\\ | path- | Set the _HDRI_ image that can be used as ambient lighting and skybox.Valid file format are hdr, exr, png, jpg, pnm, tiff, bmp. If not set, a default is provided. | \\-\\-hdri-ambient | string- | Light the scene using the _HDRI_ image as ambient lighting.The environment act as a light source and is reflected on the material. | \\-\\-texture-matcap=\\ | path- | Set the texture file to control the material capture of the object. All other model options for surfaces are ignored if this is set. Must be in linear color space. Model specified by default. | \\-\\-texture-base-color=\\ | path- | Set the texture file to control the color of the object. Please note this will be multiplied with the color and opacity options. Must be in sRGB color space. Model specified by default. | \\-\\-texture-material=\\ | path- | Set the texture file to control the occlusion, roughness and metallic values of the object. Please note this will be multiplied with the roughness and metallic options, which have impactful default values. To obtain true results, use \\-\\-roughness=1 \\-\\-metallic=1. Must be in linear color space. Model specified by default. | \\-\\-texture-emissive=\\ | path- | Set the texture file to control the emitted light of the object. Please note this will be multiplied with the emissive factor. Must be in sRGB color space. Model specified by default. | \\-\\-emissive-factor=\\ | color- | Set the emissive factor. This value is multiplied with the emissive color when an emissive texture is present. Model specified by default. | \\-\\-texture-normal=\\ | path- | Set the texture file to control the normal map of the object. Must be in sRGB color space. Model specified by default. | \\-\\-normal-scale=\\ | double- | Set the normal scale. This value affects the strength of the normal deviation from the normal texture. Model specified by default. | ## Window options | Options | TypeDefault | Description | ------------------------------- | ----------------------------- | ---------------------------------------------------------------------------------------------------- | \\-\\-background-color=\\ | color0.2, 0.2, 0.2 | Set the window _background color_.Ignored if _hdri_ is set. | \\-\\-resolution=\\ | vector\\1000, 600 | Set the _window resolution_. | \\-\\-position=\\ | vector\\- | Set the _window position_ (top left corner) , in pixels, starting from the top left of your screens. | -z, \\-\\-fps | boolfalse | Display a rendering _frame per second counter_. | -n, \\-\\-filename | boolfalse | Display the _name of the file_ on top of the window. | -m, \\-\\-metadata | boolfalse | Display the _metadata_. | \\-\\-hdri-skybox | boolfalse | Show the HDRI as a skybox. Overrides \\-\\-background-color and \\-\\-no-background. | -u, \\-\\-blur-background | boolfalse | Blur background.Useful with a HDRI skybox. | \\-\\-blur-coc | double20 | Blur circle of confusion radius. | \\-\\-light-intensity | double1.0 | _Adjust the intensity_ of every light in the scene. | ## Scientific visualization options | Options | TypeDefault | Description | --------------------------------- | --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -s, \\-\\-scalar-coloring | boolfalse | Enable scalar coloring if present in the file. If `--coloring-array` is not set, the first in alphabetical order will be picked if any are available. | \\-\\-coloring-array=\\ | string- | The coloring array name to use when coloring.Use \\-\\-verbose to recover the usable array names. | -y, \\-\\-comp=\\ | int-1 | Specify the _component from the scalar_ array to color with.Use with the scalar option. -1 means _magnitude_. -2 or the short option, -y, means _direct values_.When using _direct values_, components are used as L, LA, RGB, RGBA values depending on the number of components. | -c, \\-\\-cells | boolfalse | Specify that the scalar array is to be found _on the cells_ instead of on the points.Use with the scalar option. | \\-\\-range=\\ | vector\\- | Set the _coloring range_. Automatically computed by default.Use with the scalar option. | -b, \\-\\-bar | boolfalse | Show _scalar bar_ of the coloring by array.Use with the scalar option. | \\-\\-colormap\\-file=\\ | string- | Set a _colormap file for the coloring_.See [color maps](/f3d/doc/user/COLOR_MAPS.html).Use with the scalar option. | \\-\\-colormap=\\ | colormap- | Set a _custom colormap for the coloring_.See [colormap parsing](/f3d/doc/user/PARSING.html#colormap) for details.Ignored if `--colormap-file` option is specified.Use with the scalar option. | -v, \\-\\-volume | boolfalse | Enable _volume rendering_. It is only available for 3D image data (vti, dcm, nrrd, mhd files) and will display nothing with other formats. It forces coloring. | -i, \\-\\-inverse | boolfalse | Inverse the linear opacity function used for volume rendering. | ## Camera configuration options | Options | TypeDefault | Description | ------------------------------------ | --------------------- | ---------------------------------------------------------------------------------------------- | \\-\\-camera-position=\\ | vector\\- | Set the camera position, overrides --camera-direction and camera-zoom-factor. | \\-\\-camera-focal-point=\\ | vector\\- | Set the camera focal point. | \\-\\-camera-view-up=\\ | direction- | Set the camera view up vector. Will be orthogonalized. | \\-\\-camera-view-angle=\\ | double- | Set the camera view angle, a strictly positive value in degrees. | \\-\\-camera-direction=\\ | direction- | Set the camera direction, looking at the focal point. | \\-\\-camera-zoom-factor=\\ | double- | Set the camera zoom factor relative to the autozoom on data, a strictly positive value. | \\-\\-camera-azimuth-angle=\\ | double0.0 | Apply an azimuth transformation to the camera, in degrees, added after other camera options. | \\-\\-camera-elevation-angle=\\ | double0.0 | Apply an elevation transformation to the camera, in degrees, added after other camera options. | \\-\\-camera-orthographic | bool- | Set the camera to use the orthographic projection. Model specified by default. | ## Raytracing options | Options | TypeDefault | Description | ----------------------- | --------------- | -------------------------------------------------------------------------------------------------- | -r, \\-\\-raytracing | boolfalse | Enable _OSPRay raytracing_. Requires OSPRay raytracing to be enabled in the linked VTK dependency. | \\-\\-samples=\\ | int5 | Set the number of _samples per pixel_ when using raytracing. | -d, \\-\\-denoise | boolfalse | _Denoise_ the image when using raytracing. | ## PostFX (OpenGL) options | Options | TypeDefault | Description | ---------------------------- | --------------- | --------------------------------------------------------------------------------------------------------------- | -p, \\-\\-translucency-support | boolfalse | Enable _translucency support_. This is a technique used to correctly render translucent objects. | -q, \\-\\-ambient-occlusion | boolfalse | Enable _ambient occlusion_. This is a technique used to improve the depth perception of the object. | -a, \\-\\-anti-aliasing | boolfalse | Enable _anti-aliasing_. This technique is used to reduce aliasing. | \\-\\-anti-aliasing-mode | stringfxaa | Anti-aliasing method (`fxaa`: fast, `ssaa`: quality) | -t, \\-\\-tone-mapping | boolfalse | Enable generic filmic _Tone Mapping Pass_. This technique is used to map colors properly to the monitor colors. | \\-\\-final-shader | string- | Add a final shader to the output image. See the [dedicated documentation](/f3d/doc/user/FINAL_SHADER.html) for more details. | ## Testing options | Options | TypeDefault | Description | ---------------------------------------- | --------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- | \\-\\-ref=\\ | string- | Render and compare with the provided _reference image_, for testing purposes. Use with output option to generate new baselines and diff images. | \\-\\-ref-threshold=\\ | double0.04 | Set the _comparison threshold_ to trigger a test failure or success. The default (0.04) correspond to almost visually identical images. | \\-\\-interaction-test-record=\\ | string- | Path to an interaction log file to _record interaction events_ to. | \\-\\-interaction-test-play=\\ | string- | Path to an interaction log file to _play interactions events_ from when loading a file. | ## Rendering options precedence Some rendering options are not compatible between them, here is the precedence order if several are provided: - Raytracing (`-r`) - Volume (`-v`) - Point Sprites (`-o`) ## Options syntax To turn on/off boolean options, it is possible to write `--option=true` and `--option=false`, eg `--points-sprites=false`. As documented, the `--option=value` syntax should be preferred. The syntax `--option value` can have unintended effect with positional arguments. The `-R` short option has a special syntax: `-Rlibf3d.option` but can also be used with `--reset=libf3d.option` The `-D/--define` option has a special syntax: `-Dlibf3d.option=value` or `--define=libf3d.option=value`. All options are parsed according to their type, see the [parsing documentation](/f3d/doc/user/PARSING.html) for more details. ## Filename templating The destination filename used by `--output` or to save screenshots using `--screenshot-filename` can use the following template variables: - `{app}`: application name (ie. `F3D`) - `{version}`: application version (eg. `2.4.0`) - `{version_full}`: full application version (eg. `2.4.0-abcdefgh`) - `{model}`: current model filename without extension (eg. `foo` for `/home/user/foo.glb`) - `{model.ext}`: current model filename with extension (eg. `foo.glb` for `/home/user/foo.glb`) - `{model_ext}`: current model filename extension (eg. `glb` for `/home/user/foo.glb`) - `{date}`: current date in YYYYMMDD format - `{date:format}`: current date as per C++'s `std::put_time` format - `{n}`: auto-incremented number to make filename unique (up to 1000000) - `{n:2}`, `{n:3}`, ...: zero-padded auto-incremented number to make filename unique (up to 1000000) - variable names can be escaped by doubling the braces (eg. use `{{model}}.png` to output `{model}.png` without the model name being substituted) For example the screenshot filename is configured as `{app}/{model}_{n}.png` by default, meaning that, assuming the model `hello.glb` is being viewed, consecutive screenshots are going to be saved as `F3D/hello_1.png`, `F3D/hello_2.png`, `F3D/hello_3.png`, ... Model related variables will be replaced by `no_file` if no file is loaded and `multi_file` if multiple files are loaded using the `multi-file-mode` option. ## HDRI Caches When using HDRI related options, F3D will create and use a cache directory to store related data in order to speed up rendering. These cache files can be safely removed at the cost of recomputing them on next use. The cache directory location is as follows, in order, using the first defined environment variables: - Windows: `%LOCALAPPDATA%\\f3d` - Linux: `${XDG_CACHE_HOME}/f3d`,`${HOME}/.cache/f3d` - macOS: `${HOME}/Library/Caches/f3d` ",
    "url": "/f3d/doc/user/OPTIONS.html",
    
    "relUrl": "/doc/user/OPTIONS.html"
  },"35": {
    "doc": "Parsing options",
    "title": "Parsing options",
    "content": "# Parsing options When setting options from the [CLI Options](/f3d/doc/user/OPTIONS.html), the [commands](/f3d/doc/user/COMMANDS.html) or using the [libf3d options string API](/f3d/doc/libf3d/OPTIONS.html#string-api), the values are parsed according to their type. If parsing fails, the value is not changed. The following types are supported: - bool: A boolean, true or false. - int: A signed integer. - double: A floating point number. - ratio: A double dividend over a double divisor, stored in a double. - string: A string of characters. - path: A path to a local file. - color: A RGB color. - direction: A 3D vector representing a direction. As well as a list for bool, int, double, ratio, string, noted as - vector\\ ## Bool The following formats are supported when parsing a bool, case insensitive: - true/false - yes/no - on/off - 1/0 When formatting a bool into a string, true/false is used. ## Int Int parsing is supported using [std::stoi](https://en.cppreference.com/w/cpp/string/basic_string/stol) and check that the whole string is parsed. When formatting an int into a string, [std::to_string](https://en.cppreference.com/w/cpp/string/basic_string/to_string) is used. ## Double Double parsing is supported using [std::stod](https://en.cppreference.com/w/cpp/string/basic_string/stol) and check that the whole string is parsed. When formatting a double into a string, [std::ostringstream](https://en.cppreference.com/w/cpp/io/basic_ostringstream) is used with removing the point and precision when the value is exactly an integer. ## Ratio The following formats are supported when parsing a string into a ratio: - percent% where percent is a double - dividend:divisor where both are doubles - dividend/divisor where both are doubles - double Percent, dividend, divisor are then parsed as double. When formatting a ratio into a string, it is formatted as a double. ## String String are trimmed of leading and trailing space when parsed. String are formatted as is. ## String Path are formatted by creating a [std::filesystem::path](https://en.cppreference.com/w/cpp/filesystem/path/path) and then collapsed using [f3d::utils::collapsePath](https://f3d.app/doc/libf3d/doxygen/api/classf3d_1_1utils.html#_CPPv4N3f3d5utils12collapsePathERKNSt10filesystem4pathERKNSt10filesystem4pathE). Path are formatted using [std::filesystem::path::string](https://en.cppreference.com/w/cpp/filesystem/path/string). ## Vectors Vector tokens are separated by `,`, tokens are then parsed using their respective types. When formatting a vector into a string, individual token are formatted according to their type and separated using `,`. ## Color The following formats are supported when parsing a color, case insensitive: - R,G,B where R, G, B are doubles >= 0 - #RRGGBB where RR, GG, BB are hexadecimal values. Shortened format #RGB is also valid. - rgb(R, G, B) where R, G and B are integer [0, 255] - hsl(H, S%, L%) where H is integer [0, 360], S and L are integer [0, 100] - hsv(H, S%, V%) where H is integer [0, 360], S and V are integer [0, 100] - hwb(H, W%, B%) where H is integer [0, 360], W and B are integer [0, 100] - cmyk(C%, M%, Y%, K%) where C, M, Y, K are integer [0, 100] - [color name](https://htmlpreview.github.io/?https://github.com/Kitware/vtk-examples/blob/gh-pages/VTKNamedColorPatches.html) See [W3C](https://www.w3.org/TR/css-color-3/#rgb-color) doc for more details on these formats. When formatting a color into a string, it is formatted as `#RRGGBB` if values are multiple of 255. Otherwise, it is formatted as vector of doubles. ## Direction The following formats are supported when parsing a string into a direction: - `[[+|-]X][[+|-]Y][[+|-]Z]` (case insensitive), for example `+X` or `X` for `1,0,0`, `-y+z` for `0,-1,1` - vector of three doubles, for example `1,2,3.4` When formatting a direction into a string, it is formatted in the `±XYZ` form if possible or as a vector of doubles otherwise. ## Colormap The following formats are supported when parsing a string into a colormap: - `val, red, green, blue, ...` - `val, color, ...` When formatting a colormap into a string, it is formatted as `val, color, ...`. ",
    "url": "/f3d/doc/user/PARSING.html",
    
    "relUrl": "/doc/user/PARSING.html"
  },"36": {
    "doc": "Plugins",
    "title": "Plugins",
    "content": "## Plugins F3D officially supports plugins for certain file formats. If you installed F3D using the binary release, there's no need to manually load these plugins when opening your file. F3D will load them automatically. However, if you installed F3D using a package manager, it's possible that the packager chose to bundle the plugins into different packages or to list plugin dependencies as optional in order to reduce the number of dependencies of the main package. In order to open a file that requires a plugin, make sure you've installed all necessary dependencies. You can then specify the `--load-plugins=` [option](/f3d/doc/user/OPTIONS.html) in the command line to load your plugin. Alternatively, you can add your plugin directly in the [configuration file](/f3d/doc/user/CONFIGURATION_FILE.html) if it isn't there already. You can specify one or multiple plugins in a single comma-separated list, like in the example below: ``` [ { \"match\": \".*(file_extension)\", \"options\": { \"load-plugins\": \"plugin1\", \"plugin2\" } } ] ``` ### Supported plugins F3D supports loading plugins and contains the following plugins: `native`, `alembic`, `assimp`, `draco`, `hdf`, `occt`, `usd`, `vdb`. see [the format list](/f3d/doc/user/SUPPORTED_FORMATS.html) for more details. > Note: Native plugin is always loaded automatically. > Note: If you downloaded the binaries from the release page, it's not necessary to specify manually the plugins above. F3D loads them automatically. Here is how the plugins are searched (in preceding order): 1. Search the static plugins. 2. Consider the `load-plugins` option given it is a full path. 3. Search in the paths specified in `F3D_PLUGINS_PATH` environment variable. 4. Search in a directory relative to the F3D application: `../lib`. 5. Rely on OS specific paths (e.g. `LD_LIBRARY_PATH` on Linux or `DYLD_LIBRARY_PATH` on macOS). You can also try plugins maintained by the community. If you have created a plugin and would like it to be listed here, please submit a pull request. - **Abaqus**: ODB support by @YangShen398 ([repository](https://github.com/YangShen398/F3D-ODB-Reader-Plugin)) ",
    "url": "/f3d/doc/user/PLUGINS.html",
    
    "relUrl": "/doc/user/PLUGINS.html"
  },"37": {
    "doc": "Quickstart",
    "title": "Quickstart",
    "content": "# Quickstart Guide This guide will help you get started using F3D. As an overview, you'll learn how to run F3D and open files, configure basic scene constructions, interact with them, and play animations. ## Prerequisites To use F3D, you'll need to install F3D. See the [Installation](/f3d/doc/user/INSTALLATION.html) page for the latest release package supported by your system. ## Running F3D Once F3D has been installed, you should be able to open a file in any of the following ways: - Open a file directly from your file manager. - Open the F3D application directly, then drag and drop a file into the application window. - Run F3D from the terminal with a set of command-line [options](/f3d/doc/user/OPTIONS.html). - Configure F3D as a [thumbnailer](/f3d/doc/user/DESKTOP_INTEGRATION.html) for supported file formats with certain file managers. If you choose to run F3D from the terminal, you can open your file by running the following: ``` f3d /path/to/file.ext ``` Optionally, you can also save the rendering into an image file: ``` f3d /path/to/file.ext --output=/path/to/img.png ``` If you need help, specify the `--help` [option](/f3d/doc/user/OPTIONS.html): ``` f3d --help man f3d # Linux only ``` Once you've opened your file in F3D, you're all set to start visualizing! Press H to open a list of shortcuts to help you interact with your scene. See the [supported file formats](/f3d/doc/user/SUPPORTED_FORMATS.html) page for the full list of file types that F3D can open. ## Constructing scenes Certain [formats](/f3d/doc/user/SUPPORTED_FORMATS.html) are listed as **full scene** formats (.gltf/.glb, .3ds, .wrl, .obj, .fbx, .dae, .off, .x, .3mf, .usd) which means these files contain not only _geometry_ but also some scene information like _lights_, _cameras_, _actors_ in the scene, as well as _texture_ properties. By default, all this information will be loaded from the file and displayed. For file formats that are not **full scene**, **a default scene** is created. For **default scene** formats, certain default values are set automatically: - texture-\\*: \"\" - line-width: 1.0 - point-size: 10.0 - opacity: 1.0 - color: 1.0, 1.0, 1.0 - emissive-factor: 1.0, 1.0, 1.0 - normal-scale: 1.0 - metallic: 0.0 - roughness: 0.3 - base-ior: 1.5 - camera-orthographic: false They will be overridden when using corresponding [options](/f3d/doc/user/OPTIONS.html), either from command line or [configuration file](/f3d/doc/user/CONFIGURATION_FILE.html). ## Interacting with your scene Once you've loaded your scene in F3D, you can interact with it by using your mouse and certain hotkeys. ### Moving the camera - _Click and drag_ with the _left_ mouse button to **rotate** around the focal point of the camera. - _Click and drag_ vertically with the _right_ mouse button OR _move the mouse wheel_ to **zoom in/out**. - _Click and drag_ with the _middle_ mouse button to **translate** the camera. ### Other shortcuts - Press Enter to reset the camera. - Press Space to play animation, if any. - Press G to toggle the horizontal grid. - Press H to display a cheatsheet of hotkey interactions. For more information, see the [Interactions](/f3d/doc/user/INTERACTIONS.html) page. ## Playing animations F3D can play [animations](/f3d/doc/user/ANIMATIONS.html) for any [supported files](/f3d/doc/user/SUPPORTED_FORMATS.html) that contain them. With your file loaded into F3D, press the W hotkey to cycle through available animations. Then, press Space to play your selected animation. Alternatively, you can use the command line to play animations. Use the `--animation-index` [option](/f3d/doc/user/OPTIONS.html) to specify which animation you want to play. To play all animations at once, use `--animation-index=-1` (`.gltf`/`.glb` only). For more information, see the [Animations](/f3d/doc/user/ANIMATIONS.html) page. ## Further Reading - [A list of all F3D command-line options.](/f3d/doc/user/OPTIONS.html) - [How to interact with scenes in F3D.](INTERACTIONS.MD) - [How to play animations in F3D.](/f3d/doc/user/ANIMATIONS.html) - [How to specify colormaps in F3D.](/f3d/doc/user/COLOR_MAPS.html) - [How to configure plugins in F3D.](/f3d/doc/user/PLUGINS.html) - [Limitations and how to troubleshoot F3D.](/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html) ",
    "url": "/f3d/doc/user/QUICKSTART.html",
    
    "relUrl": "/doc/user/QUICKSTART.html"
  },"38": {
    "doc": "User Documentation",
    "title": "User Documentation",
    "content": "# User Documentation - [How to use F3D.](/f3d/doc/user/QUICKSTART.html) - [How to install F3D.](/f3d/doc/user/INSTALLATION.html) - [List of all supported file formats.](/f3d/doc/user/SUPPORTED_FORMATS.html) - [List of all F3D command line options.](/f3d/doc/user/OPTIONS.html) - [The different interactions in F3D.](/f3d/doc/user/INTERACTIONS.html) - [How to use animations in F3D.](/f3d/doc/user/ANIMATIONS.html) - [How to configure F3D using a configuration file.](/f3d/doc/user/CONFIGURATION_FILE.html) - [The different commands available in F3D.](/f3d/doc/user/COMMANDS.html) - [How are options values are parsed in F3D.](/f3d/doc/user/PARSING.html) - [How to use colormaps in F3D.](/f3d/doc/user/COLOR_MAPS.html) - [How to a use custom final shader in F3D.](/f3d/doc/user/FINAL_SHADER.html) - [How to integrate F3D in your desktop.](/f3d/doc/user/DESKTOP_INTEGRATION.html) - [How to configure plugins in F3D.](/f3d/doc/user/PLUGINS.html) - [Limitations and troubleshooting of F3D.](/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html) - [How to sponsor F3D.](/f3d/doc/user/SPONSORING.html) ",
    "url": "/f3d/doc/user/README_USER.html",
    
    "relUrl": "/doc/user/README_USER.html"
  },"39": {
    "doc": "Sponsoring",
    "title": "Sponsoring",
    "content": "# Sponsoring ## Sponsors F3D, a fast and minimalist 3D viewer is at heart a passion project. We (Michael and myself, Mathieu) created it in order to create the best 3D viewer that we ourselves _want_ to use. I'm very active in the open source world. I'm employed at Kitware (creator of CMake, VTK and ParaView) and work on VTK and ParaView everyday, while also working on F3D when I have any free time! I love software design and the software process. Michael is a veteran of the rendering and simulation industry. We met at Kitware and decided to start working on F3D together. He is the expert in all things rendering in F3D, and then some. We are trying to find some sponsors for F3D in order to cover some of the expenses that it incurs. For starters, we rely on github infrastructure, which has some costs, even for open source, especially in regard to LFS data, costs that scale with the popularity of the project. Second, we now have a great website, [f3d.app](https://f3d.app), relying on github pages. We do pay for a domain name and we would like to cover that as well. If we have enough sponsors, we can consider buying more hardware to develop for and test with, especially Linux mobile and android. We also want to promote F3D in open source conferences and summits, being able to do that would be great! Finally, we want to give back to the open source world, either by sponsoring projects that F3D rely on or even by donating to open source developers that contribute their time to the project. By sponsoring F3D you get a few perks! First you get access to a dedicated discord channel where F3D devs will answer any questions you may have. Second, if you sponsor at least 5$/month, you also get to vote for which issue should be implemented/fixed each month. By sponsoring 20$/month, you also get to pick an image to add to our [gallery](https://f3d.app/doc/GALLERY.html) to showcase your work! And of course if anyone would like to buy us a beer and talk about F3D then we would be happy to meet up in Lyon, France! Just reach out to us on our [discord](https://discord.f3d.app)! Please note everything you sponsor gets through the F3D-APP foundation, a non-profit entity we created for this purpose. We provide different ways to sponsor, choose your preferred one! - [Github sponsors](https://github.com/sponsors/f3d-app) - [Patreon](https://patreon.com/f3d_app_foundation) - [ko-fi](https://ko-fi.com/f3d_app) - [liberapay](https://liberapay.com/f3d-app/) - [Tipee](https://fr.tipeee.com/f3d-app/) - [buy me a coffee](https://buymeacoffee.com/f3d.app) - [donorbox](https://donorbox.org/support-f3d) - Direct Transfer: - IBAN: `FR7616958000018496562230572` - BIC/SWIFT: `QNTOFRP1XXX` ## Industry Sponsors If you or your company are using F3D in any capacity and you want to ensure F3D keeps growing and being maintained, we would love to hear from you! You can sponsor F3D through the non-profit F3D-APP FOUNDATION and we will acknowledge your support by displaying your logo on our [README.md](/f3d/) as well as sharing about your support whenever we get the chance. Please reach out at . ",
    "url": "/f3d/doc/user/SPONSORING.html",
    
    "relUrl": "/doc/user/SPONSORING.html"
  },"40": {
    "doc": "Supported File Formats",
    "title": "Supported File Formats",
    "content": "# Supported File Formats F3D supports the following file formats: | Name | File Extension(s) | Full scene | Animation Supported? | Plugin | ----------------------------------------- | ---------------------------------------------- | ---------- | -------------------- | --------- | Legacy VTK | `.vtk` | No | No | `native` | VTK XML | `.vtp`, `.vtu`, `.vtr`, `.vti`, `.vts`, `.vtm` | No | No | `native` | VTKHDF | `.vtkhdf` | No | Yes | `hdf` | EXODUS II | `.e`, `.ex2`, `.exo`, `.g` | No | Yes | `hdf` | Polygon File Format | `.ply` | No | No | `native` | Standard Triangle Language | `.stl` | No | No | `native` | DICOM | `.dcm` | No | No | `native` | NRRD (\"nearly raw raster data\") | `.nrrd`, `.nhrd` | No | No | `native` | MetaHeader MetaIO | `.mhd`, `.mha` | No | No | `native` | Tag Image File Format 2D/3D | `.tif`, `.tiff` | No | No | `native` | QuakeMDL | `.mdl` | Yes | Yes | `native` | CityGML | `.gml` | No | No | `native` | Point Cloud | `.pts` | No | No | `native` | Standard for the Exchange of Product Data | `.step`, `.stp` | No | No | `occt` | Initial Graphics Exchange Specification | `.iges`, `.igs` | No | No | `occt` | Open CASCADE Technology BRep format | `.brep` | No | No | `native` | Alembic | `.abc` | No | Yes | `alembic` | Wavefront OBJ | `.obj` | Yes | Yes | `native` | GL Transmission Format | `.gltf`, `.glb` | Yes | Yes | `native` | Autodesk 3D Studio | `.3ds` | Yes | No | `native` | Virtual Reality Modeling Language | `.wrl` | Yes | No | `native` | Autodesk Filmbox | `.fbx` | Yes | Yes | `assimp` | COLLADA | `.dae` | Yes | Yes | `assimp` | Object File Format | `.off` | Yes | No | `assimp` | Drawing Exchange Format | `.dxf` | Yes | No | `assimp` | DirectX | `.x` | Yes | Yes | `assimp` | 3D Manufacturing Format | `.3mf` | Yes | No | `assimp` | Universal Scene Description | `.usd`, `.usda`, `.usdc`, `.usdz` | Yes | Yes | `usd` | VDB | `.vdb` | No | No | `vdb` | ## Reader options Readers can provide option that can be set using the `-D/--define` [command line option](/f3d/doc/user/OPTIONS.html). eg: `-DVDB.downsampling_factor=0.5`. Values are parsed as doubles. For booleans, 0 means false, not 0 means true. - `vdb` - `VDB.downsampling_factor` : Control the level of downsampling when reading a volume, default is 0.1. - `occt` - `STEP.linear_deflection` : Control the distance between a curve and the resulting tessellation, default is 0.1. - `occt` - `STEP.angular_deflection` : Control the angle between two subsequent segments, default is 0.5. - `occt` - `STEP.relative_deflection` : Control if the deflection values are relative to object size, default is false. - `occt` - `STEP.read_wire` : Control if lines should be read, default is true. - `occt` - `IGES.linear_deflection` : Control the distance between a curve and the resulting tessellation, default is 0.1. - `occt` - `IGES.angular_deflection` : Control the angle between two subsequent segments, default is 0.5. - `occt` - `IGES.relative_deflection` : Control if the deflection values are relative to object size, default is false. - `occt` - `IGES.read_wire` : Control if lines should be read, default is true. - `occt` - `BREP.linear_deflection` : Control the distance between a curve and the resulting tessellation, default is 0.1. - `occt` - `BREP.angular_deflection` : Control the angle between two subsequent segments, default is 0.5. - `occt` - `BREP.relative_deflection` : Control if the deflection values are relative to object size, default is false. - `occt` - `BREP.read_wire` : Control if lines should be read, default is true. - `occt` - `XBF.linear_deflection` : Control the distance between a curve and the resulting tessellation, default is 0.1. - `occt` - `XBF.angular_deflection` : Control the angle between two subsequent segments, default is 0.5. - `occt` - `XBF.relative_deflection` : Control if the deflection values are relative to object size, default is false. - `occt` - `XBF.read_wire` : Control if lines should be read, default is true. ## Format details ### QuakeMDL - Models texture are loaded with a simple PBR lighting (diffuse color only, no specular, index of refraction set to 1.0). - Selecting `skin` is not supported. - Loading `groupskin` is not supported. - Animation frames are split based on their names, eg: `stand1`, `stand2`, `stand3`, `run1`, `run2`, `run3`. ",
    "url": "/f3d/doc/user/SUPPORTED_FORMATS.html",
    
    "relUrl": "/doc/user/SUPPORTED_FORMATS.html"
  }
}
